<?xml version="1.0"?>
<doc>
    <assembly>
        <name>openSourceC.DotNetLibrary.Core</name>
    </assembly>
    <members>
        <member name="T:openSourceC.DotNetLibrary.AbstractInjector`1">
            <summary>
            	Summary description for AbstractInjector&lt;TInjectorSettings&gt;.
            </summary>
            <typeparam name="TInjectorSettings">The settings element type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractInjector`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.AbstractInjector`1"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="settings">The <typeparamref name="TInjectorSettings"/>
            	object.</param>
            <param name="nameSuffix">The name suffix to use, or null is not used.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.AbstractInjector`2">
            <summary>
            	Summary description for AbstractInjector&lt;TInjectorSettings, TRequestContext&gt;.
            </summary>
            <typeparam name="TInjectorSettings">The settings element type.</typeparam>
            <typeparam name="TRequestContext">The <typeparamref name="TRequestContext"/> type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractInjector`2.#ctor(Microsoft.Extensions.Logging.ILogger,`1,System.String[],`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.AbstractInjector`2"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="requestContext">The current <typeparamref name="TRequestContext"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="settings">The <typeparamref name="TInjectorSettings"/> object.</param>
            <param name="nameSuffix">The name suffix to use, or null is not used.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractInjector`2.RequestContext">
            <summary>Gets the current <see cref="T:TRequestContext"/> object.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.AbstractInjectorBase`1">
            <summary>
            	Provides a base implementation for the extensible injector model.
            </summary>
            <remarks>
            	The injector model is intended to encapsulate all or part of the functionality of
            	multiple application features, such as persistence, profiles, and protected
            	configuration. It allows the developer to create supporting classes that provide
            	multiple implementations of the encapsulated functionality. In addition, developers can
            	write new features using the injector model. This can be an effective way to support
            	multiple implementations of a feature's functionality without duplicating the feature
            	code or recoding the application layer if the implementation method needs to be changed.
            	<para>The <see cref="T:AbstractInjectorBase"/> class is simple, containing only a few
            	basic methods and properties that are common to all injectors. Feature-specific
            	injectors inherit from <see cref="T:AbstractInjectorBase"/> and establish the necessary
            	methods and properties that the implementation-specific injectors for that feature must
            	support. Implementation-specific injectors inherit in turn from a feature-specific
            	injector.</para>
            	<para>The most important aspect of the injector model is that the implementation (for
            	example, whether data is persisted as a text file or in a database) is abstracted from
            	the application code. The type of the implementation-specific injector for the given
            	feature is designated in a configuration file. The feature-level injector then reads in
            	the type from the configuration file and acts as a factory to the feature code. The
            	application developer can then use the feature classes in the application code. The
            	implementation type can be swapped out in the configuration file, eliminating the need
            	to rewrite the code to accommodate the different implementation methodology.</para>
            	<para>This model can, and should, be applied to any kind of feature functionality that
            	could be abstracted and implemented in multiple ways.</para>
            </remarks>
            <typeparam name="TInjectorSettings">The injector settings type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractInjectorBase`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.AbstractInjectorBase`1"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="settings">The <typeparamref name="TInjectorSettings"/> object.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractInjectorBase`1.Finalize">
            <summary>
            	This destructor will run only if the Dispose method does not get called.
            </summary>
            <remarks>Do not provide destructors in types derived from this class.</remarks>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractInjectorBase`1.Disposed">
            <summary>Gets a value indicating that this instance has been disposed.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractInjectorBase`1.Dispose">
            <summary>
            	Dispose of this object.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractInjectorBase`1.Dispose(System.Boolean)">
            <summary>
            	Dispose(bool disposing) executes in two distinct scenarios.  If disposing equals
            	<b>true</b>, <see cref="M:Dispose()"/> has been called directly or indirectly
            	by a user's code.  Managed and unmanaged resources can be disposed.  If disposing
            	equals <b>false</b>, <see cref="M:Dispose()"/> has been called by the runtime from
            	inside the finalizer and you should not reference other objects.  Only unmanaged
            	resources can be disposed.
            </summary>
            <param name="disposing"><b>true</b> when <see cref="M:Dispose()"/> has been called
            	directly or indirectly by a user's code.  <b>false</b> when <see cref="M:Dispose()"/>
            	has been called by the runtime from inside the finalizer and you should not
            	reference other objects.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractInjectorBase`1.Initialize">
            <summary>
            	Initializes the injector.
            </summary>
            <remarks>
            	The base class implementation internally tracks whether the injector's
            	<see cref="M:Initialize()"/> method has been called and only returns <b>true</b> to
            	that caller that actually initializes the object.  This method potentially blocks
            	all use of the object while initializing the object.
            	<para>Because most feature injectors call <b>Initialize</b> prior to performing
            	injector-specific initialization, this method is a central location for preventing
            	double initialization.</para>
            </remarks>
            <returns>
            	<b>true</b> if the object is initialized, or <b>false</b> if it is already
            	initialized.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractInjectorBase`1.Initialization">
            <summary>
            	The virtual method called to initialize the object.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractInjectorBase`1.Logger">
            <summary>Gets the <see cref="T:ILogger"/> object.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractInjectorBase`1.NameSuffix">
            <summary>Gets the name suffix.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractInjectorBase`1.ParentNames">
            <summary>Gets the names of the parent configuration elements.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractInjectorBase`1.Settings">
            <summary>Gets the <typeparamref name="TInjectorSettings"/> object.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractInjectorBase`1.ExtendParentNames(System.String[])">
            <summary>
            	Extends the <see cref="P:ParentNames"/> property with the specified names.
            </summary>
            <param name="args">The names to appended to <see cref="P:ParentNames"/>.</param>
            <returns>
            	The extended list of parent element names.
            </returns>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractInjectorBase`1.Description">
            <summary>
            	Gets a brief, friendly description suitable for display in administrative tools or
            	other user interfaces (UIs).
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractInjectorBase`1.Initialized">
            <summary>
            	Gets a value indicating that the object has been initialized.
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.AbstractProvider`1">
            <summary>
            	Summary description for AbstractProvider&lt;TProviderSettings&gt;.
            </summary>
            <typeparam name="TProviderSettings">The settings element type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProvider`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.AbstractProvider`1"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="settings">The <typeparamref name="TProviderSettings"/>
            	object.</param>
            <param name="nameSuffix">The name suffix to use, or null is not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProvider`1.CreateInstance``2(``0,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterfaceSettingsElement">The settings element type.</typeparam>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <typeparamref name="TInterfaceSettingsElement"/>
            	object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	An instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.AbstractProvider`2">
            <summary>
            	Summary description for AbstractProvider&lt;TProviderSettings, TRequestContext&gt;.
            </summary>
            <typeparam name="TProviderSettings">The settings element type.</typeparam>
            <typeparam name="TRequestContext">The <typeparamref name="TRequestContext"/> type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProvider`2.#ctor(Microsoft.Extensions.Logging.ILogger,`1,System.String[],`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.AbstractProvider`2"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="requestContext">The current <typeparamref name="TRequestContext"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="settings">The <typeparamref name="TProviderSettings"/> object.</param>
            <param name="nameSuffix">The name suffix to use, or null is not used.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractProvider`2.RequestContext">
            <summary>Gets the current <see cref="T:TRequestContext"/> object.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProvider`2.CreateInstance``2(``0,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterfaceSettingsElement">The settings element type.</typeparam>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <typeparamref name="TInterfaceSettingsElement"/>
            	object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	An instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.AbstractProviderBase`1">
            <summary>
            	Summary description for AbstractProviderBase&lt;TProviderSettings&gt;.
            </summary>
            <typeparam name="TProviderSettings">The provider settings type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProviderBase`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.AbstractProviderBase`1"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="settings">The <typeparamref name="TProviderSettings"/> object.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProviderBase`1.Dispose(System.Boolean)">
            <summary>
            	Dispose(bool disposing) executes in two distinct scenarios.  If disposing equals
            	<b>true</b>, <see cref="M:Dispose()"/> has been called directly or indirectly
            	by a user's code.  Managed and unmanaged resources can be disposed.  If disposing
            	equals <b>false</b>, <see cref="M:Dispose()"/> has been called by the runtime from
            	inside the finalizer and you should not reference other objects.  Only unmanaged
            	resources can be disposed.
            </summary>
            <param name="disposing"><b>true</b> when <see cref="M:Dispose()"/> has been called
            	directly or indirectly by a user's code.  <b>false</b> when <see cref="M:Dispose()"/>
            	has been called by the runtime from inside the finalizer and you should not
            	reference other objects.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProviderBase`1.Initialize">
            <summary>
            	Initializes the provider.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProviderBase`1.CreateInstance``1(`0,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <typeparamref name="TProviderSettings"/> object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	An instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractProviderBase`1.Logger">
            <summary>Gets the <see cref="T:ILogger"/> object.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractProviderBase`1.NameSuffix">
            <summary>Gets the name suffix.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractProviderBase`1.ParentNames">
            <summary>Gets the names of the parent configuration elements.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractProviderBase`1.SettingsElement">
            <summary>Gets the <typeparamref name="TProviderSettings"/> object.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProviderBase`1.ExtendParentNames(System.String[])">
            <summary>
            	Extends the <see cref="P:ParentNames"/> property with the specified names.
            </summary>
            <param name="args">The names to appended to <see cref="P:ParentNames"/>.</param>
            <returns>
            	The extended list of parent element names.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.AbstractProviderBase">
            <summary>
            	Provides a base implementation for the extensible provider model.
            </summary>
            <remarks>
            	The provider model is intended to encapsulate all or part of the functionality of
            	multiple application features, such as persistence, profiles, and protected
            	configuration. It allows the developer to create supporting classes that provide
            	multiple implementations of the encapsulated functionality. In addition, developers can
            	write new features using the provider model. This can be an effective way to support
            	multiple implementations of a feature's functionality without duplicating the feature
            	code or recoding the application layer if the implementation method needs to be changed.
            	<para>The <see cref="T:AbstractProviderBase"/> class is simple, containing only a few
            	basic methods and properties that are common to all providers. Feature-specific
            	providers inherit from <see cref="T:AbstractProviderBase"/> and establish the necessary
            	methods and properties that the implementation-specific providers for that feature must
            	support. Implementation-specific providers inherit in turn from a feature-specific
            	provider.</para>
            	<para>The most important aspect of the provider model is that the implementation (for
            	example, whether data is persisted as a text file or in a database) is abstracted from
            	the application code. The type of the implementation-specific provider for the given
            	feature is designated in a configuration file. The feature-level provider then reads in
            	the type from the configuration file and acts as a factory to the feature code. The
            	application developer can then use the feature classes in the application code. The
            	implementation type can be swapped out in the configuration file, eliminating the need
            	to rewrite the code to accommodate the different implementation methodology.</para>
            	<para>This model can, and should, be applied to any kind of feature functionality that
            	could be abstracted and implemented in multiple ways.</para>
            </remarks>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProviderBase.#ctor(System.String)">
            <summary>
            	Creates a new instance of the <see cref="T:AbstractProviderBase"/> class.
            </summary>
            <param name="description">The description of the provider.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProviderBase.Finalize">
            <summary>
            	This destructor will run only if the Dispose method does not get called.
            </summary>
            <remarks>Do not provide destructors in types derived from this class.</remarks>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractProviderBase.Disposed">
            <summary>Gets a value indicating that this instance has been disposed.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProviderBase.Dispose">
            <summary>
            	Dispose of this object.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProviderBase.Dispose(System.Boolean)">
            <summary>
            	Dispose(bool disposing) executes in two distinct scenarios.  If disposing equals
            	<b>true</b>, <see cref="M:Dispose()"/> has been called directly or indirectly
            	by a user's code.  Managed and unmanaged resources can be disposed.  If disposing
            	equals <b>false</b>, <see cref="M:Dispose()"/> has been called by the runtime from
            	inside the finalizer and you should not reference other objects.  Only unmanaged
            	resources can be disposed.
            </summary>
            <param name="disposing"><b>true</b> when <see cref="M:Dispose()"/> has been called
            	directly or indirectly by a user's code.  <b>false</b> when <see cref="M:Dispose()"/>
            	has been called by the runtime from inside the finalizer and you should not
            	reference other objects.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.AbstractProviderBase.Initialize">
            <summary>
            	Initializes the provider.
            </summary>
            <remarks>
            	The base class implementation internally tracks the number of times the provider's
            	<b>Initialize</b> method has been called. If a provider is initialized more than
            	once, an <b>InvalidOperationException</b> is thrown stating that the provider is
            	already initialized.
            	<para>Because most feature providers call <b>Initialize</b> prior to performing
            	provider-specific initialization, this method is a central location for preventing
            	double initialization.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <b>Initialize</b>
            	on a provider after the provider has already been initialized.</exception>
        </member>
        <member name="P:openSourceC.DotNetLibrary.AbstractProviderBase.Description">
            <summary>
            	Gets a brief, friendly description suitable for display in administrative tools or
            	other user interfaces (UIs).
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.DbAbstractInjector`1">
            <summary>
            	Summary description for DbAbstractInjector.
            </summary>
            <typeparam name="TInjectorSettings"></typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbAbstractInjector`1.#ctor(Microsoft.Extensions.Logging.ILogger,`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.DbAbstractInjector`1"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="settings">The <see name="T:DbInjectorElement"/> object.</param>
            <param name="nameSuffix">The name suffix to use, or null is not used.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.DbAbstractInjector`2">
            <summary>
            	Summary description for DbAbstractInjector&lt;TInjectorSettings, TRequestContext&gt;.
            </summary>
            <typeparam name="TInjectorSettings"></typeparam>
            <typeparam name="TRequestContext">The <typeparamref name="TRequestContext"/> type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbAbstractInjector`2.#ctor(Microsoft.Extensions.Logging.ILogger,`1,`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.DbAbstractInjector`1"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="requestContext">The current <typeparamref name="TRequestContext"/> object.</param>
            <param name="settings">The <see name="T:DbInjectorElement"/> object.</param>
            <param name="nameSuffix">The name suffix to use, or null is not used.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.DbAbstractInjector`2.RequestContext">
            <summary>Gets the current <see cref="T:TRequestContext"/> object.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.DbAbstractInjectorBase`1">
            <summary>
            	Summary description for DbAbstractInjectorBase&lt;TSettingsElement&gt;.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbAbstractInjectorBase`1.#ctor(Microsoft.Extensions.Logging.ILogger,`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.DbAbstractInjectorBase`1"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="settings">The <see name="T:DbInjectorElement"/> object.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.DbAbstractProvider">
            <summary>
            	Summary description for DbAbstractProvider.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbAbstractProvider.#ctor(Microsoft.Extensions.Logging.ILogger,openSourceC.DotNetLibrary.Configuration.DbProviderSettings,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.DbAbstractProvider"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="settings">The <see name="T:DbProviderElement"/> object.</param>
            <param name="nameSuffix">The name suffix to use, or null is not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbAbstractProvider.CreateInstance``1(openSourceC.DotNetLibrary.Configuration.DbProviderSettings,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <see name="T:DbProviderElement"/> object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	An instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.DbAbstractProvider`1">
            <summary>
            	Summary description for DbAbstractProvider&lt;TRequestContext&gt;.
            </summary>
            <typeparam name="TRequestContext">The <typeparamref name="TRequestContext"/> type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbAbstractProvider`1.#ctor(Microsoft.Extensions.Logging.ILogger,`0,openSourceC.DotNetLibrary.Configuration.DbProviderSettings,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.DbAbstractProvider`1"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="requestContext">The current <typeparamref name="TRequestContext"/> object.</param>
            <param name="settings">The <see name="T:DbProviderElement"/> object.</param>
            <param name="nameSuffix">The name suffix to use, or null is not used.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.DbAbstractProvider`1.RequestContext">
            <summary>Gets the current <see cref="T:TRequestContext"/> object.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbAbstractProvider`1.CreateInstance``1(openSourceC.DotNetLibrary.Configuration.DbProviderSettings,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <see name="T:DbProviderElement"/> object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	An instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.DbAbstractProviderBase">
            <summary>
            	Summary description for DbAbstractProviderBase&lt;TSettingsElement&gt;.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbAbstractProviderBase.#ctor(Microsoft.Extensions.Logging.ILogger,openSourceC.DotNetLibrary.Configuration.DbProviderSettings,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.DbAbstractProviderBase"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="settings">The <see name="T:DbProviderElement"/> object.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbAbstractProviderBase.Dispose(System.Boolean)">
            <summary>
            	Dispose(bool disposing) executes in two distinct scenarios.  If disposing equals
            	<b>true</b>, <see cref="M:Dispose()"/> has been called directly or indirectly
            	by a user's code.  Managed and unmanaged resources can be disposed.  If disposing
            	equals <b>false</b>, <see cref="M:Dispose()"/> has been called by the runtime from
            	inside the finalizer and you should not reference other objects.  Only unmanaged
            	resources can be disposed.
            </summary>
            <param name="disposing"><b>true</b> when <see cref="M:Dispose()"/> has been called
            	directly or indirectly by a user's code.  <b>false</b> when <see cref="M:Dispose()"/>
            	has been called by the runtime from inside the finalizer and you should not
            	reference other objects.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbAbstractProviderBase.Initialize">
            <summary>
            	Initializes the provider.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.DbAbstractProviderBase.ApplicationName">
            <summary>Gets the application name.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.DbAbstractProviderBase.ConnectionName">
            <summary>Gets the connection name.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.DbProxyProvider">
            <summary>
            	Summary description for DbProxyProvider.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbProxyProvider.#ctor(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.DbProxyProvider"/> class.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbProxyProvider.CreateInstance``1(openSourceC.DotNetLibrary.Configuration.DbProviderSettings,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <see name="T:DbProviderElement"/> object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	An instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.DbProxyProvider`1">
            <summary>
            	Summary description for DbProxyProvider&lt;TRequestContext&gt;.
            </summary>
            <typeparam name="TRequestContext">The <typeparamref name="TRequestContext"/> type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbProxyProvider`1.#ctor(Microsoft.Extensions.Logging.ILogger,`0,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.DbProxyProvider`1"/>
            	class.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="requestContext">The current <typeparamref name="TRequestContext"/> object.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.DbProxyProvider`1.CreateInstance``1(openSourceC.DotNetLibrary.Configuration.DbProviderSettings,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <see name="T:DbProviderElement"/> object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	An instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="P:openSourceC.DotNetLibrary.DbProxyProvider`1.RequestContext">
            <summary>Gets the current <see cref="T:TRequestContext"/> object.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.KeyedAbstractProvider`1">
            <summary>
            	Summary description for KeyedAbstractProvider&lt;TKeyedProviderSettings&gt;.
            </summary>
            <typeparam name="TKeyedProviderSettings">The keyed provider settings type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.KeyedAbstractProvider`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.KeyedAbstractProvider`1"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="settings">The <typeparamref name="TKeyedProviderSettings"/>
            	object.</param>
            <param name="nameSuffix">The name suffix to use, or null is not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.KeyedAbstractProvider`1.CreateInstance``2(``0,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterfaceKeyedProviderSettings">The keyed provider settings type.</typeparam>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <typeparamref name="TInterfaceKeyedProviderSettings"/>
            	object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	A <see cref="T:KeyedAbstractProvider&lt;TSettingsElement&gt;"/>
            	instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.KeyedAbstractProvider`2">
            <summary>
            	Summary description for KeyedAbstractProvider&lt;TKeyedProviderSettings, TRequestContext&gt;.
            </summary>
            <typeparam name="TKeyedProviderSettings">The settings element type.</typeparam>
            <typeparam name="TRequestContext">The <typeparamref name="TRequestContext"/> type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.KeyedAbstractProvider`2.#ctor(Microsoft.Extensions.Logging.ILogger,`1,System.String[],`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.KeyedAbstractProvider`2"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="requestContext">The current <typeparamref name="TRequestContext"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="settings">The <typeparamref name="TKeyedProviderSettings"/> object.</param>
            <param name="nameSuffix">The name suffix to use, or null is not used.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.KeyedAbstractProvider`2.RequestContext">
            <summary>Gets the current <see cref="T:TRequestContext"/> object.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.KeyedAbstractProvider`2.CreateInstance``2(``0,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterfaceSettingsElement">The settings element type.</typeparam>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <typeparamref name="TInterfaceSettingsElement"/>
            	object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	A <see cref="T:KeyedAbstractProvider&lt;TSettingsElement&gt;"/>
            	instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.KeyedAbstractProviderBase`1">
            <summary>
            	Summary description for KeyedAbstractProviderBase&lt;TKeyedProviderSettings&gt;.
            </summary>
            <typeparam name="TKeyedProviderSettings">The keyed provider settings type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.KeyedAbstractProviderBase`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],`0,System.String)">
            <summary>
            	Creates an instance of <see cref="T:openSourceC.DotNetLibrary.KeyedAbstractProviderBase`1"/>.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="settings">The <typeparamref name="TKeyedProviderSettings"/> object.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.KeyedAbstractProviderBase`1.Dispose(System.Boolean)">
            <summary>
            	Dispose(bool disposing) executes in two distinct scenarios.  If disposing equals
            	<b>true</b>, <see cref="M:Dispose()"/> has been called directly or indirectly
            	by a user's code.  Managed and unmanaged resources can be disposed.  If disposing
            	equals <b>false</b>, <see cref="M:Dispose()"/> has been called by the runtime from
            	inside the finalizer and you should not reference other objects.  Only unmanaged
            	resources can be disposed.
            </summary>
            <param name="disposing"><b>true</b> when <see cref="M:Dispose()"/> has been called
            	directly or indirectly by a user's code.  <b>false</b> when <see cref="M:Dispose()"/>
            	has been called by the runtime from inside the finalizer and you should not
            	reference other objects.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.KeyedAbstractProviderBase`1.Initialize">
            <summary>
            	Initializes the provider.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.KeyedAbstractProviderBase`1.ShortName">
            <summary>Gets or sets the provider name excluding the suffix.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.KeyedAbstractProviderBase`1.Description">
            <summary>
            	Gets a brief, friendly description suitable for display in administrative tools or
            	other user interfaces (UIs).
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.KeyedAbstractProviderBase`1.Key">
            <summary>
            	Gets the friendly key name used to refer to the provider during configuration.
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.ProxyProvider">
            <summary>
            	Summary description for ProxyProvider.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ProxyProvider.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.ProxyProvider"/> class.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ProxyProvider.CreateInstance``2(``0,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TKeyedProviderSettings">The settings element type.</typeparam>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <typeparamref name="TKeyedProviderSettings"/>
            	object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	A <see cref="T:KeyedAbstractProvider&lt;TKeyedProviderSettings&gt;"/>
            	instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.ProxyProvider`1">
            <summary>
            	Summary description for ProxyProvider&lt;TRequestContext&gt;.
            </summary>
            <typeparam name="TRequestContext">The <typeparamref name="TRequestContext"/> type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ProxyProvider`1.#ctor(Microsoft.Extensions.Logging.ILogger,`0,System.String[],System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.ProxyProvider`1"/>
            	class.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="requestContext">The current <typeparamref name="TRequestContext"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ProxyProvider`1.CreateInstance``2(``0,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TKeyedProviderSettings">The settings element type.</typeparam>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <typeparamref name="TKeyedProviderSettings"/>
            	object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	A <see cref="T:KeyedAbstractProvider&lt;TKeyedProviderSettings&gt;"/>
            	instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="P:openSourceC.DotNetLibrary.ProxyProvider`1.RequestContext">
            <summary>Gets the current <see cref="T:TRequestContext"/> object.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.ProxyProviderBase">
            <summary>
            	Summary description for ProxyProviderBase.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ProxyProviderBase.#ctor(Microsoft.Extensions.Logging.ILogger,System.String[],System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="parentNames">The names of the parent configuration elements.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.ProxyProviderBase.Disposed">
            <summary>Gets a value indicating that this instance has been disposed.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ProxyProviderBase.Dispose">
            <summary>
                Dispose and release all resources used by this instance.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ProxyProviderBase.Dispose(System.Boolean)">
            <summary>
            	Dispose(bool disposing) executes in two distinct scenarios.  If disposing equals
            	<b>true</b>, <see cref="M:Dispose()"/> has been called directly or indirectly
            	by a user's code.  Managed and unmanaged resources can be disposed.  If disposing
            	equals <b>false</b>, <see cref="M:Dispose()"/> has been called by the runtime from
            	inside the finalizer and you should not reference other objects.  Only unmanaged
            	resources can be disposed.
            </summary>
            <param name="disposing"><b>true</b> when <see cref="M:Dispose()"/> has been called
            	directly or indirectly by a user's code.  <b>false</b> when <see cref="M:Dispose()"/>
            	has been called by the runtime from inside the finalizer and you should not
            	reference other objects.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ProxyProviderBase.Initialize">
            <summary>
            	Initializes the provider.
            </summary>
            <remarks>
            	The base class implementation internally tracks the number of times the provider's
            	<b>Initialize</b> method has been called. If a provider is initialized more than
            	once, an <b>InvalidOperationException</b> is thrown stating that the provider is
            	already initialized.
            	<para>Because most feature providers call <b>Initialize</b> prior to performing
            	provider-specific initialization, this method is a central location for preventing
            	double initialization.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <b>Initialize</b>
            	on a provider after the provider has already been initialized.</exception>
        </member>
        <member name="P:openSourceC.DotNetLibrary.ProxyProviderBase.Logger">
            <summary>Gets the <see cref="T:ILogger"/> object.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.ProxyProviderBase.NameSuffix">
            <summary>Gets the name suffix.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.ProxyProviderBase.ParentNames">
            <summary>Gets the names of the parent configuration elements.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.ActionNameAttribute">
            <summary>
            	Allows the assignment of an MVC controller action name to an enumeration member.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ActionNameAttribute.#ctor(System.String)">
            <summary>
            	Initializes a new instance of <see cref="T:ActionNameAttribute"/>.
            </summary>
            <param name="actionName">The action name.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.ActionNameAttribute.ActionName">
            <summary>Gets the action name.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.EnumMemberGuidAttribute">
            <summary>
            	Supplies an explicit <see cref="T:System.Guid" /> for <see cref="T:System.Enum"/> element.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumMemberGuidAttribute.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:EnumMemberGuidAttribute" /> class
            	with the specified GUID.
            </summary>
            <param name="guid">The <see cref="T:System.Guid" /> to be assigned. </param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EnumMemberGuidAttribute.Value">
            <summary>Gets the <see cref="T:System.Guid" /> of the element.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.RelatedTypeAttribute">
            <summary>
            	Allows the assignment of a related <see cref="T:Type"/> to an enumeration member.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.RelatedTypeAttribute.#ctor(System.Type)">
            <summary>
            	Initializes a new instance of <see cref="T:RelatedTypeAttribute"/>.
            </summary>
            <param name="type">The related type.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.RelatedTypeAttribute.Type">
            <summary>Gets the related type.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.SkipRecursiveAttribute">
            <summary>
            	Use this attribute to skip recursion checking.
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.BusinessObject">
            <summary>
            	Summary description for BusinessObject.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.BusinessObject.#ctor(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.BusinessObject"/> class.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.BusinessObject.CreateInstance``1(openSourceC.DotNetLibrary.Configuration.DbProviderSettings,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <see name="T:DbProviderElement"/> object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	An instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.BusinessObject`1">
            <summary>
            	Summary description for BusinessObject&lt;TRequestContext&gt;.
            </summary>
            <typeparam name="TRequestContext">The <typeparamref name="TRequestContext"/> type.</typeparam>
        </member>
        <member name="M:openSourceC.DotNetLibrary.BusinessObject`1.#ctor(Microsoft.Extensions.Logging.ILogger,`0,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.BusinessObject`1"/>
            	class.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="requestContext">The current <typeparamref name="TRequestContext"/> object.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.BusinessObject`1.CreateInstance``1(openSourceC.DotNetLibrary.Configuration.DbProviderSettings,System.Object[])">
            <summary>
            	Creates a provider instance that implements <typeparamref name="TInterface"/>.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="settings">The <see name="T:DbProviderElement"/> object.</param>
            <param name="args">The arguments to pass to the constructor. This array of arguments
            	must match in number, order, and type the parameters of the constructor to invoke.
            	If the default constructor is preferred, <paramref name="args"/> must be an empty
            	array or null.</param>
            <returns>
            	An instance that implements <typeparamref name="TInterface"/>.
            </returns>
        </member>
        <member name="P:openSourceC.DotNetLibrary.BusinessObject`1.RequestContext">
            <summary>Gets the current <see cref="T:TRequestContext"/> object.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.BusinessObjectBase">
            <summary>
            	Summary description for BusinessObjectBase.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.BusinessObjectBase.#ctor(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            	Creates an instance of BusinessObjectBase.
            </summary>
            <param name="logger">The <see cref="T:ILogger"/> object.</param>
            <param name="nameSuffix">The name suffix used, or <b>null</b> if not used.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.BusinessObjectBase.Finalize">
            <summary>
            	This destructor will run only if the Dispose method does not get called.
            </summary>
            <remarks>Do not provide destructors in types derived from this class.</remarks>
        </member>
        <member name="P:openSourceC.DotNetLibrary.BusinessObjectBase.Disposed">
            <summary>Gets a value indicating that this instance has been disposed.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.BusinessObjectBase.Dispose">
            <summary>
            	Dispose of this object.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.BusinessObjectBase.Dispose(System.Boolean)">
            <summary>
            	Dispose(bool disposing) executes in two distinct scenarios.  If disposing equals
            	<b>true</b>, <see cref="M:Dispose()"/> has been called directly or indirectly
            	by a user's code.  Managed and unmanaged resources can be disposed.  If disposing
            	equals <b>false</b>, <see cref="M:Dispose()"/> has been called by the runtime from
            	inside the finalizer and you should not reference other objects.  Only unmanaged
            	resources can be disposed.
            </summary>
            <param name="disposing"><b>true</b> when <see cref="M:Dispose()"/> has been called
            	directly or indirectly by a user's code.  <b>false</b> when <see cref="M:Dispose()"/>
            	has been called by the runtime from inside the finalizer and you should not
            	reference other objects.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.BusinessObjectBase.Logger">
            <summary>Gets the <see cref="T:ILogger"/> object.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.BusinessObjectBase.NameSuffix">
            <summary>Gets the name suffix.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.ComponentModel.ByteArrayConverter">
            <summary>
            	Summary description for ByteArrayConverter.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ComponentModel.ByteArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="sourceType"></param>
             <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ComponentModel.ByteArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="culture"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ComponentModel.ByteArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="culture"></param>
             <param name="value"></param>
             <param name="destinationType"></param>
             <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ComponentModel.ByteArrayConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.ComponentModel.RectangleLTRBConverter">
            <summary>
            	Summary description for RectangleLTRBConverter.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ComponentModel.RectangleLTRBConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="sourceType"></param>
             <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ComponentModel.RectangleLTRBConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="destinationType"></param>
             <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ComponentModel.RectangleLTRBConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="culture"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ComponentModel.RectangleLTRBConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="culture"></param>
             <param name="value"></param>
             <param name="destinationType"></param>
             <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ComponentModel.RectangleLTRBConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Configuration.ConnectionSettings">
            <summary>
            	Represents a uniquely keyed connection settings object.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Configuration.ConnectionSettings.ConnectionString">
            <summary>Gets or sets the connection string.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Configuration.DbInjectorSettings">
            <summary>
            	Represents a uniquely keyed database settings object.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Configuration.DbInjectorSettings.ApplicationName">
            <summary>Gets or sets the application name.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Configuration.DbInjectorSettings.ConnectionKey">
            <summary>Gets or sets the connection key name.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Configuration.DbProviderSettings">
            <summary>
            	Represents a uniquely keyed database provider settings object.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Configuration.DbProviderSettings.ApplicationName">
            <summary>Gets or sets the application name.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Configuration.DbProviderSettings.ConnectionKey">
            <summary>Gets or sets the connection key name.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Configuration.InjectorSettings">
            <summary>
            	Represents a provider settings object.
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Configuration.KeyedProviderSettings">
            <summary>
            	Represents a uniquely keyed provider settings object.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Configuration.KeyedProviderSettings.Key">
            <summary>Gets or sets the unique key name of the provider settings.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Configuration.ProviderSettings">
            <summary>
            	Represents a provider settings object.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Configuration.ProviderSettings.Type">
            <summary>Gets or sets the type of the object configured by this class.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.CryptoStreamWriteDelegate">
            <summary>
            	Summary description for CryptoStreamWriteDelegate.
            </summary>
            <param name="cryptoStream">The stream on which to write.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Encryption">
            <summary>
            	Summary description for Encryption.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.#cctor">
            <summary>
            	Class constructor.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.Decrypt``1(System.Byte[],System.Byte[],openSourceC.DotNetLibrary.CryptoStreamWriteDelegate)">
            <summary>
            	Decrypts the data written to the <see cref="T:System.Security.Cryptography.CryptoStream"/> within the delegate
            	using the specified key and initialization vector.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <param name="cryptoStreamWriteDelegate">The delegate that writes to the
            	<see cref="T:System.Security.Cryptography.CryptoStream"/>.</param>
            <returns>
            	A byte array with the decrypted data.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.Decrypt``1(System.IO.Stream,System.Byte[],System.Byte[],openSourceC.DotNetLibrary.CryptoStreamWriteDelegate)">
            <summary>
            	Decrypts the data written to the <see cref="T:System.Security.Cryptography.CryptoStream"/> within the delegate
            	using the specified key and initialization vector.  The decrypted data is written to
            	the specified stream.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="stream">The stream on which to write the decrypted data.</param>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <param name="cryptoStreamWriteDelegate">The delegate that writes to the
            	<see cref="T:System.Security.Cryptography.CryptoStream"/>.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.DecryptFromBase64String(System.String,System.Byte[],System.Byte[])">
            <summary>
            	Decrypts the specified base 64 encoded string with the specified key and
            	initialization vector and returns the decrypted data as a string.
            </summary>
            <param name="buffer">The string to decrypt.</param>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <returns>
            	Decrypted string.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.DecryptFromBase64String``1(System.IO.Stream,System.String,System.Byte[],System.Byte[])">
            <summary>
            	Decrypts the specified base 64 encoded string using the specified key and
            	initialization vector.  The decrypted data is written to the specified stream
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="stream">The stream on which to write the decrypted data.</param>
            <param name="buffer">The string to decrypt.</param>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.DecryptFromBase64String``1(System.String,System.Byte[],System.Byte[])">
            <summary>
            	Decrypts the specified base 64 encoded string using the specified key and
            	initialization vector.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="buffer">The string to decrypt.</param>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <returns>
            	A byte array with the decrypted data.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.Encrypt``1(System.Byte[],System.Byte[],openSourceC.DotNetLibrary.CryptoStreamWriteDelegate)">
            <summary>
            	Encrypts the data written to the <see cref="T:System.Security.Cryptography.CryptoStream"/> within the delegate
            	using the specified key and initialization vector.  If the specified <see cref="T:System.IO.Stream"/>
            	is not null, the encrypted data is written to it.  If it is null, a byte array
            	is returned.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <param name="cryptoStreamWriteDelegate">The delegate that writes to the
            	<see cref="T:System.Security.Cryptography.CryptoStream"/>.</param>
            <returns>
            	If the specified <see cref="T:System.IO.Stream"/> is null, a byte array with the encrypted
            	data; otherwise, null.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.Encrypt``1(System.IO.Stream,System.Byte[],System.Byte[],openSourceC.DotNetLibrary.CryptoStreamWriteDelegate)">
            <summary>
            	Encrypts the data written to the <see cref="T:System.Security.Cryptography.CryptoStream"/> within the delegate
            	using the specified key and initialization vector.  If the specified <see cref="T:System.IO.Stream"/>
            	is not null, the encrypted data is written to it.  If it is null, a byte array
            	is returned.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="stream">The stream on which to write the encrypted data.</param>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <param name="cryptoStreamWriteDelegate">The delegate that writes to the
            	<see cref="T:System.Security.Cryptography.CryptoStream"/>.</param>
            <returns>
            	If the specified <see cref="T:System.IO.Stream"/> is null, a byte array with the encrypted
            	data; otherwise, null.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.Encrypt``1(System.IO.Stream,System.String,System.Byte[],System.Byte[])">
            <summary>
            	Encrypts the specified string using the specified key and initialization vector.
            	The encrypted data is written to the specified stream.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="stream">The stream on which to write the encrypted data.</param>
            <param name="buffer">The string to encrypt.</param>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.Encrypt``1(System.String,System.Byte[],System.Byte[])">
            <summary>
            	Encrypts the specified string using the specified key and initialization vector.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="buffer">The string to encrypt.</param>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <returns>
            	A byte array with the encrypted data.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.EncryptToBase64String(System.String,System.Byte[],System.Byte[])">
            <summary>
            	Encrypts the specified string with the specified key and initialization vector and
            	returns a base 64 encoded string.
            </summary>
            <param name="buffer">The string to encrypt.</param>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <returns>Encrypted string.</returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.EncryptToBase64String``1(System.String,System.Byte[],System.Byte[])">
            <summary>
            	Encrypts the specified string with the specified key and initialization vector and
            	returns a base 64 encoded string.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="buffer">The string to encrypt.</param>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <returns>Encrypted string.</returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.EncryptToBase64String``1(System.Byte[],System.Byte[],openSourceC.DotNetLibrary.CryptoStreamWriteDelegate)">
            <summary>
            	Encrypts the data written to the <see cref="T:System.Security.Cryptography.CryptoStream"/> within the delegate
            	using the specified key and initialization vector and returns a base 64 encoded
            	string.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <param name="cryptoStreamWriteDelegate">The delegate that writes to the
            	<see cref="T:System.Security.Cryptography.CryptoStream"/>.</param>
            <returns>
            	Encrypted string.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.Decrypt``1(System.Byte[],System.Byte[],openSourceC.DotNetLibrary.CryptoStreamWriteDelegate,System.Action{System.IO.MemoryStream})">
            <summary>
            	Decrypts the data written to the <see cref="T:System.Security.Cryptography.CryptoStream"/> within the delegate
            	using the specified key and initialization vector.  If the specified <see cref="T:System.IO.Stream"/>
            	is not null, the decrypted data is written to it.  If it is null, a byte array
            	is returned.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <param name="cryptoStreamWriteDelegate">The delegate that writes to the
            	<see cref="T:System.Security.Cryptography.CryptoStream"/>.</param>
            <param name="action">The action to perform on the decrypted stream.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Encryption.Encrypt``1(System.Byte[],System.Byte[],openSourceC.DotNetLibrary.CryptoStreamWriteDelegate,System.Action{System.IO.MemoryStream})">
            <summary>
            	Encrypts the data written to the <see cref="T:System.Security.Cryptography.CryptoStream"/> within the delegate
            	using the specified key and initialization vector.  If the specified <see cref="T:System.IO.Stream"/>
            	is not null, the encrypted data is written to it.  If it is null, a byte array
            	is returned.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="key">The secret key.</param>
            <param name="iv">The initialization vector.</param>
            <param name="cryptoStreamWriteDelegate">The delegate that writes to the
            	<see cref="T:System.Security.Cryptography.CryptoStream"/>.</param>
            <param name="action">The action to perform on the encrypted stream.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.NameFormatEnum">
            <summary>
            	Name formatting enum.
            </summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.NameFormatEnum.Default">
            <summary>Default format (Last, First MI).</summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.NameFormatEnum.FirstMiddleLast">
            <summary>First Middle Last.</summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.NameFormatEnum.FirstMILast">
            <summary>First MI Last.</summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.NameFormatEnum.FirstLast">
            <summary>First Last.</summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.NameFormatEnum.LastFirstMI">
            <summary>Last, First MI.</summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.NameFormatEnum.LastFirstMiddle">
            <summary>Last, First Middle.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.EnumHelper">
            <summary>
            	Summary description for EnumHelper.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.ParseEnumMember``1(System.String)">
            <summary>
            	Converts the serialized value of one or more enumerated constants to an equivalent
            	enumerated object.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert <i>serializedValue</i>.</typeparam>
            <param name="serializedValue">A string containing the name to convert.</param>
            <returns>
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.ParseEnumMember``1(System.String,System.Boolean)">
            <summary>
            	Converts the serialized value of one or more enumerated constants to an equivalent
            	enumerated object.  A parameter specifies whether the operation is case-sensitive.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert <i>serializedValue</i>.</typeparam>
            <param name="serializedValue">A string containing the name to convert.</param>
            <param name="ignoreCase"><b>true</b> to ignore case; <b>false</b> to regard case.</param>
            <returns>
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.ParseNullableEnumMember``1(System.String)">
            <summary>
            	Converts the serialized value of one or more enumerated constants to an equivalent
            	enumerated object.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert <i>serializedValue</i>.</typeparam>
            <param name="serializedValue">A string containing the name to convert.</param>
            <returns>
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.ParseNullableEnumMember``1(System.String,System.Boolean)">
            <summary>
            	Converts the serialized value of one or more enumerated constants to an equivalent
            	enumerated object.  A parameter specifies whether the operation is case-sensitive.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert <i>serializedValue</i>.</typeparam>
            <param name="serializedValue">A string containing the name to convert.</param>
            <param name="ignoreCase"><b>true</b> to ignore case; <b>false</b> to regard case.</param>
            <returns>
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.TryParseEnumMember``1(System.String,``0@)">
            <summary>
            	Converts the serialized value of one or more enumerated constants to an equivalent
            	enumerated object. The return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert <i>serializedValue</i>.</typeparam>
            <param name="serializedValue">A string containing the name to convert.</param>
            <param name="result">When this method returns, contains an object of type <i>TEnum</i>
            	whose value is represented by <i>serializedValue</i>. This parameter is passed
            	uninitialized.</param>
            <returns>
            	<b>true</b> if the value parameter was converted successfully; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.TryParseEnumMember``1(System.String,System.Boolean,``0@)">
            <summary>
            	Converts the serialized value of one or more enumerated constants to an equivalent
            	enumerated object.  A parameter specifies whether the operation is case-sensitive.
            	The return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert <i>serializedValue</i>.</typeparam>
            <param name="serializedValue">A string containing the name to convert.</param>
            <param name="ignoreCase"><b>true</b> to ignore case; <b>false</b> to regard case.</param>
            <param name="result">When this method returns, contains an object of type <i>TEnum</i>
            	whose value is represented by <i>serializedValue</i>. This parameter is passed
            	uninitialized.</param>
            <returns>
            	<b>true</b> if the value parameter was converted successfully; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.ParseEnumMemberGuid``1(System.Guid)">
            <summary>
            	Converts the <i>value</i> parameter to an equivalent enumerated object using the
            	<see cref="T:EnumMemberGuidAttribute"/>.
            </summary>
            <typeparam name="TEnum">The enumeration type to convert <i>value</i> to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>
            	An object of type <typeparamref name="TEnum"/> whose value is represented by
            	<i>value</i>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.ParseNullableEnumMemberGuid``1(System.Guid)">
            <summary>
            	Converts the <i>value</i> parameter to an equivalent nullable enumerated object
            	using the <see cref="T:EnumMemberGuidAttribute"/>.
            </summary>
            <typeparam name="TEnum">The enumeration type to convert <i>value</i> to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>
            	An object of type <typeparamref name="TEnum"/> whose value is represented by
            	<i>value</i> if found; otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.TryParseEnumMemberGuid``1(System.Guid,``0@)">
            <summary>
            	Converts the <i>value</i> parameter to an equivalent enumerated object using the
            	<see cref="T:EnumMemberGuidAttribute"/>.  The return value indicates whether the
            	conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to convert <i>value</i> to.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="result">When this method returns, contains an object of type
            	<typeparamref name="TEnum"/> whose value is represented by <i>value</i>. This
            	parameter is passed uninitialized.</param>
            <returns>
            	<b>true</b> if <typeparamref name="TEnum"/> is a sub-class of
            	<see cref="T:Nullable&lt;T&gt;>"/> or the value parameter was converted
            	successfully; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.ParseRelatedType``1(System.Type)">
            <summary>
            	Converts type to an equivalent enumerated object using the
            	<see cref="T:RelatedTypeAttribute"/>.
            </summary>
            <typeparam name="TEnum">The enumeration type to convert <i>type</i> to.</typeparam>
            <param name="type">The type to convert.</param>
            <returns>
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.ParseNullableRelatedType``1(System.Type)">
            <summary>
            	Converts type to an equivalent enumerated object using the
            	<see cref="T:RelatedTypeAttribute"/>.  A parameter specifies whether the operation
            	is case-sensitive.
            </summary>
            <typeparam name="TEnum">The enumeration type to convert <i>type</i> to.</typeparam>
            <param name="type">The type to convert.</param>
            <returns>
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EnumHelper.TryParseRelatedType``1(System.Type,``0@)">
            <summary>
            	Converts type to an equivalent enumerated object using the
            	<see cref="T:RelatedTypeAttribute"/>.  A parameter specifies whether the operation
            	is case-sensitive.  The return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to convert <i>type</i> to.</typeparam>
            <param name="type">The type to convert.</param>
            <param name="result">When this method returns, contains an object of type <i>TEnum</i>
            	whose value is represented by <i>serializedValue</i>. This parameter is passed
            	uninitialized.</param>
            <returns>
            	<b>true</b> if the value parameter was converted successfully; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.NullValueException">
            <summary>
            	The exceptions that is thrown when a non-null value is expected.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.NullValueException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.NullValueException" /> class.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.NullValueException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.NullValueException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.NullValueException.#ctor(System.String,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.NullValueException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.NullValueException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
                catch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.NullValueException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.NullValueException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
            c   atch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.NullValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.NullValueException" />
                class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.OscErrorException">
            <summary>
            	Defines the base class for error exceptions that are compatible with the framework's
            	logging system.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscErrorException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscErrorException" /> class.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscErrorException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscErrorException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscErrorException.#ctor(System.String,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscErrorException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscErrorException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
                catch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscErrorException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscErrorException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
            c   atch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscErrorException" />
                class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.OscException">
            <summary>
            	Defines the base class for exceptions that are compatible with the framework's logging
            	system.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscException" /> class.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscException.#ctor(System.String,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
            c   atch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
            c   atch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscException" />
                class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.OscException.ExtendedMessage">
            <summary> Gets or sets the extended message.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.OscException.IsLogged">
            <summary>Gets or sets a value indicating whether or not the exception has been logged.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.OscException.UserMessage">
            <summary> Gets or sets the user friendly message.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscException.HResultFromLastError(System.Int32)">
             <summary>
            
             </summary>
             <param name="lastError"></param>
             <returns></returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.OscFailureAuditException">
            <summary>
            	Defines the base class for failure audit exceptions that are compatible with the
            	framework's logging system.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscFailureAuditException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscFailureAuditException" /> class.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscFailureAuditException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscFailureAuditException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscFailureAuditException.#ctor(System.String,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscFailureAuditException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscFailureAuditException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscFailureAuditException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
                catch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscFailureAuditException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscFailureAuditException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
            c   atch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscFailureAuditException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscFailureAuditException" />
                class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.OscInformationException">
            <summary>
            	Defines the base class for information exceptions that are compatible with the
            	framework's logging system.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscInformationException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscInformationException" /> class.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscInformationException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscInformationException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscInformationException.#ctor(System.String,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscInformationException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscInformationException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscInformationException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
                catch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscInformationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscInformationException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
            c   atch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscInformationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscInformationException" />
                class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.OscSuccessAuditException">
            <summary>
            	Defines the base class for success audit exceptions that are compatible with the
            	framework's logging system.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscSuccessAuditException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscSuccessAuditException" /> class.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscSuccessAuditException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscSuccessAuditException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscSuccessAuditException.#ctor(System.String,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscSuccessAuditException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscSuccessAuditException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscSuccessAuditException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
                catch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscSuccessAuditException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscSuccessAuditException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
            c   atch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscSuccessAuditException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscSuccessAuditException" />
                class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.OscWarningException">
            <summary>
            	Defines the base class for warning exceptions that are compatible with the framework's
            	logging system.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscWarningException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscWarningException" /> class.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscWarningException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscWarningException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscWarningException.#ctor(System.String,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscWarningException" />
            	class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscWarningException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscWarningException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
                catch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscWarningException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscWarningException" />
            	class with a specified error message and a reference to the
            	inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="userMessage">A user friendly message that can sent to the user.</param>
            <param name="innerException">The exception that is the cause
                of the current exception. If the innerException parameter is
                not a null reference, the current exception is raised in a
            c   atch block that handles the inner exception.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscWarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:openSourceC.DotNetLibrary.OscWarningException" />
                class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Extensions.ArrayExtensions">
            <summary>
            	Extension methods for arrays, or that return arrays.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ArrayExtensions.EndsWith(System.Byte[],System.Byte[])">
            <summary>
            	EndsWith
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ArrayExtensions.EndsWith(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            	EndsWith
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ArrayExtensions.GetUTF8DecodedString(System.Byte[])">
            <summary>
            	UTF8 decodes the specified byte array
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ArrayExtensions.IndexOf(System.Byte[],System.Byte[])">
            <summary>
            	index
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ArrayExtensions.IndexOf(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            	index
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ArrayExtensions.StartsWith(System.Byte[],System.Byte[])">
            <summary>
            	StartsWith
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ArrayExtensions.StartsWith(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            	StartsWith
            </summary>
            <param name="array"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Extensions.AttributeExtensions">
            <summary>
            	Summary description for EnumExtensions.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.AttributeExtensions.GetActionName(System.Enum)">
            <summary>
            	Gets value of the <see cref="T:ActionNameAttribute"/> for the specified enumerator
            	member.
            </summary>
            <param name="enumerator">The enumerator value.</param>
            <returns>
            	The value of the <see cref="T:ActionNameAttribute"/> for the specified enumerator
            	member if it exists; otherwise, the member name.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.AttributeExtensions.GetDisplay(System.Object)">
            <summary>
            	Gets value of the <see cref="T:DisplayAttribute"/> for the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            	The value of the <see cref="T:DisplayAttribute"/> for the specified object if it
            	exists; otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.AttributeExtensions.GetDescription(System.Enum)">
            <summary>
            	Gets value of the <see cref="T:DescriptionAttribute"/> for the specified enumerator
            	member.
            </summary>
            <param name="enumerator">The enumerator value.</param>
            <returns>
            	The value of the <see cref="T:DescriptionAttribute"/> for the specified enumerator
            	member if it exists; otherwise, the lowercase value of the member name.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.AttributeExtensions.GetEnumMember(System.Enum)">
            <summary>
            	Gets value of the <see cref="T:EnumMemberAttribute"/> for the specified enumerator
            	member.
            </summary>
            <param name="enumerator">The enumerator value.</param>
            <returns>
            	The value of the <see cref="T:EnumMemberAttribute"/> for the specified enumerator
            	member if it exists; otherwise, the lowercase value of the member name.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.AttributeExtensions.GetEnumMemberGuid(System.Enum)">
            <summary>
            	Gets value of the <see cref="T:EnumMemberGuidAttribute"/> for the specified
            	enumerator member.
            </summary>
            <param name="enumerator">The enumerator value.</param>
            <returns>
            	The value of the <see cref="T:EnumMemberGuidAttribute"/> for the specified
            	enumerator member if it exists; otherwise, null.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.AttributeExtensions.GetRelatedType(System.Enum)">
            <summary>
            	Gets value of the <see cref="T:RelatedTypeAttribute"/> for the specified enumerator
            	member.
            </summary>
            <param name="enumerator">The enumerator value.</param>
            <returns>
            	The value of the <see cref="T:RelatedTypeAttribute"/> for the specified enumerator
            	member if it exists; otherwise, null.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.AttributeExtensions.GetXmlAttributeName(System.Object,System.String)">
            <summary>
            	Gets the attribute name of the <see cref="T:XmlAttributeAttribute"/> for the
            	specified object.
            </summary>
            <param name="obj">The object being extended.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>
            	The attribute name of the <see cref="T:XmlAttributeAttribute"/> for the specified
            	object, or <b>null</b> if the attribute does not exist.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.AttributeExtensions.GetXmlElementName(System.Object,System.String)">
            <summary>
            	Gets the element name of the <see cref="T:XmlElementAttribute"/> for the specified
            	object.
            </summary>
            <param name="obj">The object being extended.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>
            	The element name of the <see cref="T:XmlElementAttribute"/> for the specified
            	object, or <b>null</b> if the attribute does not exist.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.AttributeExtensions.GetXmlEnum(System.Enum)">
            <summary>
            	Gets value of the <see cref="T:XmlEnumAttribute"/> for the specified enumerator
            	member.
            </summary>
            <param name="enumerator">The enumerator value.</param>
            <returns>
            	The value of the <see cref="T:XmlEnumAttribute"/> for the specified enumerator
            	member if it exists; otherwise, the lowercase value of the member name.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Extensions.BooleanExtensions">
            <summary>
            	Summary description for BooleanExtensions.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.BooleanExtensions.ToLowerString(System.Boolean)">
            <summary>
            	Returns either "true" or "false".
            </summary>
            <param name="value">The value.</param>
            <returns>
            	"true" when <b>true</b>, and "false" when <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.BooleanExtensions.ToOneZeroString(System.Boolean)">
            <summary>
            	Returns either "1" or "0".
            </summary>
            <param name="value">The value.</param>
            <returns>
            	"1" when <b>true</b>, and "0" when <b>false</b>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Extensions.DateTimeExtensions">
            <summary>
            	Summary description for DateTimeExtensions.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.DateTimeExtensions.ToDateTime(System.Int64)">
            <summary>
            	Converts a UNIX time (long) to a <see cref="T:DateTime"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.DateTimeExtensions.ToFriendlyString(System.DateTime)">
            <summary>
            	Gets a friendly date string in relation to todays date.
            </summary>
            <param name="obj">The <see cref="T:DateTime"/> object.</param>
            <returns>
            	A friendly date string in relation to todays date.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.DateTimeExtensions.ToFriendlyString(System.Nullable{System.DateTime})">
            <summary>
            	Gets a friendly date string in relation to todays date.
            </summary>
            <param name="obj">The nullable <see cref="T:DateTime"/> object.</param>
            <returns>
            	A friendly date string in relation to todays date.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Extensions.DateTimeOffsetExtensions">
            <summary>
            	Summary description for DateTimeOffsetExtensions.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.DateTimeOffsetExtensions.ToDateTimeOffset(System.Int64)">
            <summary>
            	Converts a UNIX time (long) to a <see cref="T:DateTimeOffset"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.DateTimeOffsetExtensions.ToFriendlyString(System.DateTimeOffset)">
            <summary>
            	Gets a friendly date string in relation to todays date.
            </summary>
            <param name="obj">The <see cref="T:DateTimeOffset"/> object.</param>
            <returns>
            	A friendly date string in relation to todays date.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.DateTimeOffsetExtensions.ToFriendlyString(System.Nullable{System.DateTimeOffset})">
            <summary>
            	Gets a friendly date string in relation to todays date.
            </summary>
            <param name="obj">The nullable <see cref="T:DateTimeOffset"/> object.</param>
            <returns>
            	A friendly date string in relation to todays date.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Extensions.ExceptionExtensions">
            <summary>
            	Summary description for ExceptionExtensions.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ExceptionExtensions.GetMessages(System.Exception)">
            <summary>
            	Returns the concatenated list of <see cref="P:Exception.Message"/> properties from
            	the root exception through all of the inner exceptions.
            </summary>
            <param name="source">The exception.</param>
            <returns>
            	Returns the concatenated list of <see cref="P:Exception.Message"/> properties from
            	the root exception through all of the inner exceptions.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Extensions.ObjectExtensions">
            <summary>
            	Summary description of ObjectExtensions.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ObjectExtensions.GetProperty(System.Object,System.String)">
            <summary>
            	Gets the value of the specified property.
            </summary>
            <param name="obj">The object being extended.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>
            	The value of the property.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ObjectExtensions.GetProperty(System.Object,System.String,System.Boolean)">
            <summary>
            	Gets the value of the specified property.
            </summary>
            <param name="obj">The object being extended.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="ignoreCase"><b>true</b> to ignore case, or <b>false</b> to regard case.</param>
            <returns>
            	The value of the property.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ObjectExtensions.GetProperty(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            	Gets the value of the specified property.
            </summary>
            <param name="obj">The object being extended.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="ignoreCase"><b>true</b> to ignore case, or <b>false</b> to regard case.</param>
            <param name="throwIfNotFound"><b>true</b> to throw an exception if the property does not
            	exist, or <b>false</b> to return null.</param>
            <returns>
            	The value of the property.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ObjectExtensions.GetPropertyType(System.Object,System.String)">
            <summary>
            	Gets the <see cref="T:Type"/> of the specified property.
            </summary>
            <param name="obj">The object being extended.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>
            	The value of the property.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ObjectExtensions.GetPropertyType(System.Object,System.String,System.Boolean)">
            <summary>
            	Gets the <see cref="T:Type"/> of the specified property.
            </summary>
            <param name="obj">The object being extended.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="ignoreCase"><b>true</b> to ignore case; <b>false</b> to regard case.</param>
            <returns>
            	The value of the property.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ObjectExtensions.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            	Sets the value of the specified property.
            </summary>
            <param name="obj">The object being extended.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The new property value.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ObjectExtensions.SetProperty(System.Object,System.String,System.Boolean,System.Object)">
            <summary>
            	Sets the value of the specified property.
            </summary>
            <param name="obj">The object being extended.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="ignoreCase"><b>true</b> to ignore case; <b>false</b> to regard case.</param>
            <param name="value">The new property value.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions">
            <summary>
            	Summary description for StringBuilderExtensions.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            	Appends a Boolean value to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            	Appends an 8-bit unsigned integer to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.Char},System.Nullable{System.Char})">
            <summary>
            	Appends a Unicode character to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Char[],System.Char[])">
            <summary>
            	Appends a Unicode character array to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
            	Appends a decimal number to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            	Appends a double-precision floating-point number to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            	Appends a Guid to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            	Appends a single-precision floating-point number to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            	Appends an <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type
            	<see cref="T:System.String"/> to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair``1(System.Text.StringBuilder,System.String,System.Nullable{``0},System.Nullable{``0})">
            <summary>
            	Appends a string representation of an enumerator to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            	Appends a 32-bit signed integer number to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            	Appends a 64-bit signed integer number to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.SByte},System.Nullable{System.SByte})">
            <summary>
            	Appends an 8-bit signed integer to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.Int16},System.Nullable{System.Int16})">
            <summary>
            	Appends a 16-bit signed integer number to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            	Appends a <see cref="T:System.DateTime"/> value to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="dateTimeFormat">The DateTime format to use.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.String,System.Nullable{System.DateTimeOffset},System.DateTimeKind,System.Nullable{System.DateTimeOffset})">
            <summary>
            	Appends a <see cref="T:System.DateTimeOffset"/> value to the parameters collection after converting it to a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="dateTimeFormat">The DateTime format to use.</param>
            <param name="value">The query-string value.</param>
            <param name="kind">The <see cref="E:DateTimeKind"/> to use for the conversion.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            	Appends a <see cref="T:System.DateTimeOffset"/> value to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="dateTimeFormat">The DateTime format to use.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            	Appends a <see cref="M:WebUtility.UrlEncode"/> encoded query-string key-value pair
            	to the end of the <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.String[],System.String[])">
            <summary>
            	Appends a <see cref="T:System.String"/> array to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            	Appends a 32-bit unsigned integer number to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            	Appends a 64-bit unsigned integer number to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringBuilderExtensions.AppendQueryStringPair(System.Text.StringBuilder,System.String,System.Nullable{System.UInt16},System.Nullable{System.UInt16})">
            <summary>
            	Appends a 16-bit unsigned integer number to the parameters collection.
            </summary>
            <param name="stringBuilder">The <see cref="T:System.Text.StringBuilder"/> object.</param>
            <param name="key">The query-string key.</param>
            <param name="value">The query-string value.</param>
            <param name="defaultValue">The query-string default value, used if value is null or
            	empty. (optional)</param>
            <returns>
            	The modified <see cref="T:System.Text.StringBuilder"/> object.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Extensions.StringExtensions">
            <summary>
            	Summary description for StringExtensions.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringExtensions.GetUTF8Bytes(System.String)">
            <summary>
            	Encodes all characters in the specified string into a UTF8 encoded sequence of bytes.
            </summary>
            <param name="obj">The string.</param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            	Returns the left part of a character string with the specified number of characters.
            </summary>
            <param name="source"></param>
            <param name="maxLength">Is a positive integer that specifies how many characters of the
            	source will be returned. If maxLength is negative, an error is returned.</param>
            <returns>
            	Returns a string of the maximum specified length.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            	Returns the right part of a character string with the specified number of characters.
            </summary>
            <param name="source"></param>
            <param name="maxLength">Is a positive integer that specifies how many characters of the
            	source will be returned. If maxLength is negative, an error is returned.</param>
            <returns>
            	Returns a string of the maximum specified length.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.StringExtensions.WordCount(System.String)">
            <summary>
            	Returns a count of the words in the specified string.
            </summary>
            <param name="str">The string</param>
            <returns>
            	A count of the words found.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Extensions.ValidatorRecursive">
            <summary>
            	Summary description for ValidatorRecursive.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ValidatorRecursive.TryValidateObject(System.Object,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            	Determines whether the specified object is valid recursively.
            </summary>
            <param name="instance">The object to validate.</param>
            <param name="validationResults">A collection to hold each failed validation.</param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Extensions.ValidatorRecursive.TryValidateObject(System.Object,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean)">
            <summary>
            	Determines whether the specified object is valid recursively.
            </summary>
            <param name="instance">The object to validate.</param>
            <param name="validationResults">A collection to hold each failed validation.</param>
            <param name="validateAllProperties"><b>true</b> to validate all properties; if
            	<b>false</b>, only required attributes are validated.</param>
            <returns></returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Format">
            <summary>
            	Summary description for Format.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.EIN(System.String)">
            <summary>
            	Formats an Employer Identification Number.
            </summary>
            <param name="input">The number to format.</param>
            <returns>
            	A correctly formatted Employer Identification Number.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.EIN(System.String,System.Boolean)">
            <summary>
            	Formats an Employer Identification Number with or without formatting.
            </summary>
            <param name="input">The number to format.</param>
            <param name="removeFormatting">A value indicating that an unformatted value is to be
            	returned.</param>
            <returns>
            	A correctly formatted Employer Identification Number.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.EmptyAsNull(System.String)">
            <summary>
            	Returns a null for empty strings.
            </summary>
            <param name="input">The number to format.</param>
            <returns>
            	A null if input is empty or null; otherwise, input.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.Exception(System.Exception)">
            <summary>
                Formats a message for logging from an exception.
            </summary>
            <param name="e">The Exception object to format.</param>
            <retvalue>
                <para>A nicely formatted exception string, including message and StackTrace information.</para>
            </retvalue>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.Exception(System.Exception,System.String)">
            <summary>
                Formats a message for logging from an exception.
            </summary>
            <param name="e">The Exception object to format.</param>
            <param name="catchMsg">The string to prepend to the exception information.</param>
            <retvalue>
                <para>A nicely formatted exception string, including message and StackTrace information.</para>
            </retvalue>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.Name(openSourceC.DotNetLibrary.NameFormatEnum,System.String,System.String,System.String)">
            <summary>
            	Format a persons name.
            </summary>
            <param name="format">The format to use.</param>
            <param name="FirstName">First name.</param>
            <param name="MiddleName">Middle name.</param>
            <param name="LastName">Last name.</param>
            <returns>
            	<para>
            		A formatted string representation of a person's name.
            	</para>
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.SSN(System.String)">
            <summary>
            	Formats a Social Security Number.
            </summary>
            <param name="input">The number to format.</param>
            <returns>
            	A correctly formatted Social Security Number.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.SSN(System.String,System.Boolean)">
            <summary>
            	Formats a Social Security Number with or without formatting.
            </summary>
            <param name="input">The number to format.</param>
            <param name="removeFormatting">A value indicating that an unformatted value is to be
            	returned.</param>
            <returns>
            	A correctly formatted Social Security Number.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.TitleCase(System.String)">
            <summary>
            	Formats a string using title case.
            </summary>
            <param name="input">The string to format.</param>
            <returns>
            	A correctly formatted title case string.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.ZipCode(System.String)">
            <summary>
            	Formats a zip code.
            </summary>
            <param name="input">The number to format.</param>
            <returns>
            	A correctly formatted zip code.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Format.ZipCode(System.String,System.Boolean)">
            <summary>
            	Formats a zip code with or without formatting.
            </summary>
            <param name="input">The number to format.</param>
            <param name="removeFormatting">A value indicating that an unformatted value is to be
            	returned.</param>
            <returns>
            	A correctly formatted zip.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.HexConvert">
            <summary>
            	Summary description for HexConvert.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.HexConvert.ByteArrayToString(System.Byte[])">
            <summary>
            	Converts a byte array to a hexadecimal string.
            </summary>
            <param name="byteArray"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.HexConvert.ByteArrayToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            	Converts a byte array to a hexadecimal string.
            </summary>
            <param name="byteArray"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.HexConvert.HexEncode(System.Byte[])">
            <summary>
            	Converts a byte array to a hexadecimal string.
            </summary>
            <param name="byteArray"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.HexConvert.HexEncode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            	Converts a byte array to a hexadecimal string.
            </summary>
            <param name="byteArray"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.HexConvert.HexDecode(System.String)">
            <summary>
            	Converts a hexadecimal string to a byte array.
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.HexConvert.StringToByteArray(System.String)">
            <summary>
            	Converts a hexadecimal string to a byte array.
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.HexConvert.DumpByteArray(System.Byte[])">
            <summary>
            	Converts a byte array to a hexadecimal string.
            </summary>
            <param name="byteArray"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.HexConvert.ToHexDump(System.Byte[])">
            <summary>
            	Converts a byte array to a hexadecimal string.
            </summary>
            <param name="byteArray"></param>
            <returns></returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.MessageLogEntryType">
            <summary>
            	Identifies the type of message log entry.
            </summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.MessageLogEntryType.Debug">
            <summary>Debugging trace.</summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.MessageLogEntryType.Error">
            <summary>Recoverable error.</summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.MessageLogEntryType.Fatal">
            <summary>Fatal error or application crash.</summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.MessageLogEntryType.Information">
            <summary>Informational message.</summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.MessageLogEntryType.Trace">
            <summary>Trace message.</summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.MessageLogEntryType.Warning">
            <summary>Noncritical problem.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.EventLogEvent">
            <summary>
            	Summary description for EventLogEvent.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor">
            <summary>
            	Create an event log event.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.Exception)">
            <summary>
                Create an event log event for an exception.
            </summary>
            <param name="e">The Exception object to format.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.Exception,System.String)">
            <summary>
                Create an event log event for an exception.
            </summary>
            <param name="e">The Exception object to format.</param>
            <param name="catchMessage">The string to prepend to the exception information.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.Exception,System.String,System.Nullable{System.Guid})">
            <summary>
                Create an event log event for an exception.
            </summary>
            <param name="e">The Exception object to format.</param>
            <param name="catchMessage">The string to prepend to the exception information.</param>
            <param name="UserID">The UserID of the current user.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.Exception,System.String,System.Nullable{System.Int16},System.Nullable{System.Int32})">
            <summary>
                Create an event log event for an exception.
            </summary>
            <param name="e">The Exception object to format.</param>
            <param name="catchMessage">The string to prepend to the exception information.</param>
            <param name="category">The category of the event.  Designed for use with the Windows Event Log.</param>
            <param name="eventID">The ID of the event.  Designed for use with the Windows Event Log.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.Exception,System.String,System.Nullable{System.Guid},System.Nullable{System.Int16},System.Nullable{System.Int32})">
            <summary>
                Create an event log event for an exception.
            </summary>
            <param name="e">The Exception object to format.</param>
            <param name="catchMessage">The string to prepend to the exception information.</param>
            <param name="userID">The UserID of the current user.</param>
            <param name="category">The category of the event.  Designed for use with the Windows Event Log.</param>
            <param name="eventID">The ID of the event.  Designed for use with the Windows Event Log.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.String,openSourceC.DotNetLibrary.MessageLogEntryType)">
            <summary>
                Create an event log event.
            </summary>
            <param name="message">The message.</param>
            <param name="messageLogEntryType">The event log entry type.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.String,System.Byte[],openSourceC.DotNetLibrary.MessageLogEntryType)">
            <summary>
                Create an event log event.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <param name="messageLogEntryType">The event log entry type.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.String,System.Byte[],System.Nullable{System.Guid},openSourceC.DotNetLibrary.MessageLogEntryType)">
            <summary>
                Create an event log event.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <param name="userID">The UserID of the current user.</param>
            <param name="messageLogEntryType">The event log entry type.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.String,System.Byte[],System.Nullable{System.Guid},System.Nullable{System.Int16},System.Nullable{System.Int32},openSourceC.DotNetLibrary.MessageLogEntryType)">
            <summary>
                Create an event log event.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <param name="userID">The UserID of the current user.</param>
            <param name="category">The category of the event.  Designed for use with the Windows Event Log.</param>
            <param name="eventID">The ID of the event.  Designed for use with the Windows Event Log.</param>
            <param name="messageLogEntryType">The event log entry type.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.String,System.Byte[],System.String,System.Nullable{System.Guid},openSourceC.DotNetLibrary.MessageLogEntryType)">
            <summary>
                Create an event log event.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <param name="source">The name of the application or object creating the event.</param>
            <param name="userID">The UserID of the current user.</param>
            <param name="messageLogEntryType">The event log entry type.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.EventLogEvent.#ctor(System.String,System.Byte[],System.String,System.Nullable{System.Guid},System.Nullable{System.Int16},System.Nullable{System.Int32},openSourceC.DotNetLibrary.MessageLogEntryType)">
            <summary>
                Create an event log event.
            </summary>
            <param name="message">The message.</param>
            <param name="data">The data.</param>
            <param name="source">The name of the application or object creating the event.</param>
            <param name="userID">The UserID of the current user.</param>
            <param name="category">The category of the event.  Designed for use with the Windows Event Log.</param>
            <param name="eventID">The ID of the event.  Designed for use with the Windows Event Log.</param>
            <param name="messageLogEntryType">The message log entry type.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.ApplicationId">
            <summary>Gets or sets the application identifier.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.ApplicationName">
            <summary>Gets or sets the name of the application.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.ApplicationVersion">
            <summary>Gets or sets the version of the application.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.CategoryId">
            <summary>Gets or sets category identifier.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.ClientIPAddress">
            <summary>Gets or sets the IP address of the client.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.CreateDate">
            <summary>Gets or sets the date and time of the event.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.Data">
            <summary>Gets or sets the binary data storage array.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.EntryType">
            <summary>Gets or sets the message log entry type.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.EventId">
            <summary>Gets or sets the event identifier.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.EventLogId">
            <summary>Gets or sets current instance identifier.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.HelpLink">
            <summary>Gets or sets the help link.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.LocationInfo">
            <summary>Gets or sets the location information.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.LogName">
            <summary>Gets or sets the name of the log.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.MachineName">
            <summary>Gets or sets the name of the machine.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.Message">
            <summary>Gets or sets the message.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.OSVersion">
            <summary>Gets or sets the version of the operating system.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.RequestData">
            <summary>Gets or sets the request contents (i.e. POST or PUT contents).</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.RequestUrl">
            <summary>Gets or sets the request url.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.Source">
            <summary>Gets or sets the name of the source.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.UserId">
            <summary>Gets or sets identifier of the current user.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.EventLogEvent.WindowsIdentityName">
            <summary>Gets or sets user name of the account that the application is running under.</summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.LocationInfo">
            <summary>
            	Summary description for LocationInfo.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.LocationInfo.#ctor(System.Type)">
            <summary>
            	Constructor.
            	<para>The <see cref="T:StackTrace"/> will be traced back to the point before the
            	call into the <paramref name="calledType"/> class to get the location information
            	of the caller.</para>
            </summary>
            <param name="calledType">The <see cref="T:Type"/> of the class that was called from the
            	main code.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.LocationInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="className"></param>
            <param name="methodName"></param>
            <param name="fileName"></param>
            <param name="lineNumber"></param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.LocationInfo.ClassName">
            <summary>Gets the name of the class.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.LocationInfo.FileName">
            <summary>Gets the name of the file.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.LocationInfo.LineNumber">
            <summary>Gets the line number within the file.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.LocationInfo.MethodName">
            <summary>Gets the name of the method.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.LocationInfo.ToString">
            <summary>
            	Gets the location information in the following format:
            	<para>&lt;Class Name&gt;.&lt;Method Name&gt;(&lt;File Name&gt;:&lt;Line Number&gt;)</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.MessageEventHandler">
            <summary>
            	Represents the method that will handle a message event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.MessageEventArgs">
            <summary>
            	Summary description for MessageEventArgs.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.#ctor(openSourceC.DotNetLibrary.LocationInfo,openSourceC.DotNetLibrary.MessageLogEntryType,System.Exception)">
            <summary>
            	Constructor.
            </summary>
            <param name="locationInfo"></param>
            <param name="messageLogEntryType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.#ctor(openSourceC.DotNetLibrary.LocationInfo,openSourceC.DotNetLibrary.MessageLogEntryType,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            	Constructor.
            </summary>
            <param name="locationInfo"></param>
            <param name="messageLogEntryType"></param>
            <param name="exception"></param>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.#ctor(openSourceC.DotNetLibrary.LocationInfo,openSourceC.DotNetLibrary.MessageLogEntryType,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            	Constructor.
            </summary>
            <param name="locationInfo"></param>
            <param name="messageLogEntryType"></param>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.#ctor(openSourceC.DotNetLibrary.LocationInfo,openSourceC.DotNetLibrary.MessageLogEntryType,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="locationInfo"></param>
            <param name="messageLogEntryType"></param>
            <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.#ctor(openSourceC.DotNetLibrary.LocationInfo,openSourceC.DotNetLibrary.MessageLogEntryType,System.String,System.Exception)">
            <summary>
            	Constructor.
            </summary>
            <param name="locationInfo"></param>
            <param name="messageLogEntryType"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.#ctor(System.Type,openSourceC.DotNetLibrary.MessageLogEntryType,System.Exception)">
            <summary>
            	Constructor.
            </summary>
            <param name="callerType"></param>
            <param name="messageLogEntryType"></param>
            <param name="exception"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.#ctor(System.Type,openSourceC.DotNetLibrary.MessageLogEntryType,System.Exception,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            	Constructor.
            </summary>
            <param name="callerType"></param>
            <param name="messageLogEntryType"></param>
            <param name="exception"></param>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.#ctor(System.Type,openSourceC.DotNetLibrary.MessageLogEntryType,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            	Constructor.
            </summary>
            <param name="callerType"></param>
            <param name="messageLogEntryType"></param>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.#ctor(System.Type,openSourceC.DotNetLibrary.MessageLogEntryType,System.String)">
            <summary>
            	Constructor.
            </summary>
            <param name="callerType"></param>
            <param name="messageLogEntryType"></param>
            <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.#ctor(System.Type,openSourceC.DotNetLibrary.MessageLogEntryType,System.String,System.Exception)">
            <summary>
            	Constructor.
            </summary>
            <param name="callerType"></param>
            <param name="messageLogEntryType"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.MessageEventArgs.EventLogEvent">
            <summary>Gets the Event Log event object.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.MessageEventArgs.LocationInfo">
            <summary>Gets the calling method.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.MessageEventArgs.MessageLogEntryType">
            <summary>Gets the log entry type.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.MessageEventArgs.Message">
            <summary>Gets the message.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.MessageEventArgs.ToString">
            <summary>
            	Returns a string representing the current object using a default message format.
            </summary>
            <returns>
            	A string representing the current object using a default message format.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.OscLog">
            <summary>
            	This object is a wrapper for log4net and includes additional features that mirror logged
            	events to the Message event in the wrapper.  This works nicely with WPF applications
            	where you can log events to a ListView control.
            </summary>
        </member>
        <member name="E:openSourceC.DotNetLibrary.OscLog.Message">
            <summary>
            	Provides messages to subscribers.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.#cctor">
            <summary>
            	Static constructor.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.#ctor(NLog.Logger)">
            <summary>
            	Constructor
            </summary>
            <param name="logger">An existing NLog <see cref="T:Logger"/> object.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.#ctor(openSourceC.DotNetLibrary.OscLog)">
            <summary>
            	Constructor
            </summary>
            <param name="logger">An existing <see cref="T:OscLog"/> object.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.#ctor(System.String)">
            <summary>
            	Constructor
            </summary>
            <param name="loggerName">The name of the logger to use.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.OscLog.LoggerName">
            <summary>Gets the logger name.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.OscLog.DefaultLoggerName">
            <summary>
            	Gets or sets the default logger name.  Setting to <b>null</b>, causes a default
            	configuration setting to be used, or "default" if the setting does not exist.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.OscLog.Instance">
            <summary>
            	Gets the default (singleton) instance.  If defined, it uses the "DefaultLoggerName"
            	application setting for the logger name; otherwise, "default" is used.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.SetDefaultLogger(openSourceC.DotNetLibrary.OscLog)">
            <summary>
            	Sets the default logger to an existing logger instance.
            </summary>
            <param name="logger">An existing <see cref="T:OscLog"/> object.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Debug(System.Exception)">
             <summary>
            
             </summary>
             <param name="exception"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Debug(System.Exception,System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Debug(System.Exception,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Debug(System.Exception,System.String)">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Debug(System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Debug(System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Debug(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Error(System.Exception)">
             <summary>
            
             </summary>
             <param name="exception"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Error(System.Exception,System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Error(System.Exception,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Error(System.Exception,System.String)">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Error(System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Error(System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Error(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Fatal(System.Exception)">
             <summary>
            
             </summary>
             <param name="exception"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Fatal(System.Exception,System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Fatal(System.Exception,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Fatal(System.Exception,System.String)">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Fatal(System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Fatal(System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Fatal(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Info(System.Exception)">
             <summary>
            
             </summary>
             <param name="exception"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Info(System.Exception,System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Info(System.Exception,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Info(System.Exception,System.String)">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Info(System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Info(System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Info(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Trace(System.Exception)">
             <summary>
            
             </summary>
             <param name="exception"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Trace(System.Exception,System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Trace(System.Exception,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Trace(System.Exception,System.String)">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Trace(System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Trace(System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Trace(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Warn(System.Exception)">
             <summary>
            
             </summary>
             <param name="exception"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Warn(System.Exception,System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Warn(System.Exception,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Warn(System.Exception,System.String)">
             <summary>
            
             </summary>
             <param name="exception"></param>
             <param name="message"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Warn(System.IFormatProvider,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="provider"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Warn(System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.OscLog.Warn(System.String)">
             <summary>
            
             </summary>
             <param name="message"></param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.PopulateDetailField">
            <summary>
            	PopulateDetailField definition.
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Parse">
            <summary>
            Summary description for Parse.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.CSVLine(openSourceC.DotNetLibrary.PopulateDetailField,openSourceC.DotNetLibrary.IParserDetail,System.Int32)">
            <summary>
            	Parse a CSV line.
            </summary>
            <param name="populateDetailField">Delegate method that populates a field of the detail parameter.</param>
            <param name="detail">The detail object to be populated.</param>
            <param name="importVersion">Version of the import file format .</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.NullableGuid(System.String)">
            <summary>
            	Converts a Guid string to a <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.NullableInt(System.String)">
            <summary>
            	Converts the string representation of a number to its 32-bit signed integer
            	equivalent. A return value indicates whether the operation succeeded.</summary>
            <param name="s">A string containing a number to convert. </param>
            <returns>
            	Returns a nullable 32-bit signed integer value equivalent to the number contained
            	in s, if the conversion succeeded, or null if the conversion failed. The conversion
            	fails if the s parameter is not of the correct format, or represents a number less
            	than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.
            	This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.NullableInt(System.String,System.IFormatProvider)">
            <summary>
            	Converts the string representation of a number in a specified style and
            	culture-specific format to its 32-bit signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies
            	culture-specific formatting information about s.</param>
            <returns>
            	Returns a nullable 32-bit signed integer value equivalent to the number contained
            	in s, if the conversion succeeded, or null if the conversion failed. The conversion
            	fails if the s parameter is not of the correct format, or represents a number less
            	than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.
            	This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.NullableInt(System.String,System.Globalization.NumberStyles)">
            <summary>
            	Converts the string representation of a number in a specified style and
            	culture-specific format to its 32-bit signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" />
            	values that indicates the permitted format of s. A typical value to specify is
            	<see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
            <returns>
            	Returns a nullable 32-bit signed integer value equivalent to the number contained
            	in s, if the conversion succeeded, or null if the conversion failed. The conversion
            	fails if the s parameter is not of the correct format, or represents a number less
            	than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.
            	This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.NullableInt(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            	Converts the string representation of a number in a specified style and
            	culture-specific format to its 32-bit signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" />
            	values that indicates the permitted format of s. A typical value to specify is
            	<see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies
            	culture-specific formatting information about s.</param>
            <returns>
            	Returns a nullable 32-bit signed integer value equivalent to the number contained
            	in s, if the conversion succeeded, or null if the conversion failed. The conversion
            	fails if the s parameter is not of the correct format, or represents a number less
            	than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.
            	This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.NullableLong(System.String)">
            <summary>
            	Converts the string representation of a number to its 64-bit signed integer
            	equivalent. A return value indicates whether the operation succeeded.</summary>
            <param name="s">A string containing a number to convert. </param>
            <returns>
            	Returns a nullable 64-bit signed integer value equivalent to the number contained
            	in s, if the conversion succeeded, or null if the conversion failed. The conversion
            	fails if the s parameter is not of the correct format, or represents a number less
            	than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.
            	This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.NullableLong(System.String,System.IFormatProvider)">
            <summary>
            	Converts the string representation of a number in a specified culture-specific
            	format to its 64-bit signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies
            	culture-specific formatting information about s.</param>
            <returns>
            	Returns a nullable 64-bit signed integer value equivalent to the number contained
            	in s, if the conversion succeeded, or null if the conversion failed. The conversion
            	fails if the s parameter is not of the correct format, or represents a number less
            	than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.
            	This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.NullableLong(System.String,System.Globalization.NumberStyles)">
            <summary>
            	Converts the string representation of a number in a specified style to its 64-bit
            	signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" />
            	values that indicates the permitted format of s. A typical value to specify is
            	<see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
            <returns>
            	Returns a nullable 64-bit signed integer value equivalent to the number contained
            	in s, if the conversion succeeded, or null if the conversion failed. The conversion
            	fails if the s parameter is not of the correct format, or represents a number less
            	than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.
            	This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.NullableLong(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            	Converts the string representation of a number in a specified style and
            	culture-specific format to its 64-bit signed integer equivalent.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" />
            	values that indicates the permitted format of s. A typical value to specify is
            	<see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies
            	culture-specific formatting information about s.</param>
            <returns>
            	Returns a nullable 64-bit signed integer value equivalent to the number contained
            	in s, if the conversion succeeded, or null if the conversion failed. The conversion
            	fails if the s parameter is not of the correct format, or represents a number less
            	than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.
            	This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.TryNullableInt(System.String,System.Nullable{System.Int32}@)">
            <summary>
            	Converts the string representation of a number to its 32-bit signed integer
            	equivalent. A return value indicates whether the operation succeeded.</summary>
            <param name="s">A string containing a number to convert. </param>
            <param name="nullableResult">When this method returns, contains the nullable 32-bit
            	signed integer value equivalent to the number contained in s, if the conversion
            	succeeded, or null if the conversion failed. The conversion fails if the s parameter
            	is not of the correct format, or represents a number less than
            	<see cref="F:System.Int32.MinValue" /> or greater than
            	<see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized.</param>
            <returns>
            	true if s was converted successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.TryNullableInt(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Nullable{System.Int32}@)">
            <summary>
            	Converts the string representation of a number in a specified style and
            	culture-specific format to its 32-bit signed integer equivalent. A return value
            	indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" />
            	values that indicates the permitted format of s. A typical value to specify is
            	<see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies
            	culture-specific formatting information about s. </param>
            <param name="nullableResult">When this method returns, contains the nullable 32-bit
            	signed integer value equivalent to the number contained in s, if the conversion
            	succeeded, or null if the conversion failed. The conversion fails if the s parameter
            	is not of the correct format, or represents a number less than
            	<see cref="F:System.Int32.MinValue" /> or greater than
            	<see cref="F:System.Int32.MaxValue" />. This parameter is passed uninitialized.</param>
            <returns>
            	true if s was converted successfully; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">
            	style is not a <see cref="T:System.Globalization.NumberStyles" /> value.
            	-or-
            	style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />
            	and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
            </exception>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.TryNullableLong(System.String,System.Nullable{System.Int64}@)">
            <summary>
            	Converts the string representation of a number to its 64-bit signed integer
            	equivalent. A return value indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert. </param>
            <param name="nullableResult">When this method returns, contains the nullable 64-bit
            	signed integer value equivalent to the number contained in s, if the conversion
            	succeeded, or null if the conversion failed. The conversion fails if the s parameter
            	is not of the correct format, or represents a number less than
            	<see cref="F:System.Int64.MinValue" /> or greater than
            	<see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized.</param>
            <returns>
            	true if s was converted successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Parse.TryNullableLong(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Nullable{System.Int64}@)">
            <summary>
            	Converts the string representation of a number in a specified style and
            	culture-specific format to its 64-bit signed integer equivalent. A return value
            	indicates whether the operation succeeded.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" />
            	values that indicates the permitted format of s. A typical value to specify is
            	<see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies
            	culture-specific formatting information about s. </param>
            <param name="nullableResult">When this method returns, contains the nullable 64-bit
            	signed integer value equivalent to the number contained in s, if the conversion
            	succeeded, or null if the conversion failed. The conversion fails if the s parameter
            	is not of the correct format, or represents a number less than
            	<see cref="F:System.Int64.MinValue" /> or greater than
            	<see cref="F:System.Int64.MaxValue" />. This parameter is passed uninitialized.</param>
            <returns>
            	true if s was converted successfully; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">
            	style is not a <see cref="T:System.Globalization.NumberStyles" /> value.
            	-or-
            	style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />
            	and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.
            </exception>
        </member>
        <member name="T:openSourceC.DotNetLibrary.IParserDetail">
            <summary>
            	The IParserDetail interface needs to be implemented by any data item
            	that will be populated during a parsing procedure.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.IParserDetail.LineNo">
            <summary>
            	Gets or sets the line number of the import file.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.IParserDetail.LineText">
            <summary>
            	Gets or sets the line of text from the import file.
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.RegexHelper">
            <summary>
            	Summary description for RegexHelper.
            </summary>
        </member>
        <member name="F:openSourceC.DotNetLibrary.RegexHelper.ParseType">
            <summary>
            	Use this to parse fully qualified type names.
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.ReturnObject">
            <summary>
            	Summary description for ReturnObject.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ReturnObject.#ctor">
            <summary>
            	Class constructor.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ReturnObject.#ctor(System.Exception)">
            <summary>
            	Class constructor.
            </summary>
            <param name="ex">The exception used to create the exception message.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ReturnObject.#ctor(System.Exception,System.Boolean)">
            <summary>
            	Class constructor.
            </summary>
            <param name="ex">The exception used to create the exception message.</param>
            <param name="includeDebugMessage">A <b>true</b> value will set the <see cref="P:DebugMessage"/>
            	property, while a <b>false</b> value will set it to null.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ReturnObject.#ctor(System.Exception,System.Nullable{System.Int32})">
            <summary>
            	Class constructor.
            </summary>
            <param name="ex">The exception used to create the exception message.</param>
            <param name="returnCode">Return code.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ReturnObject.#ctor(System.Exception,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            	Class constructor.
            </summary>
            <param name="ex">The exception used to create the exception message.</param>
            <param name="returnCode">Return code.</param>
            <param name="includeDebugMessage">A <b>true</b> value will set the <see cref="P:DebugMessage"/>
            	property, while a <b>false</b> value will set it to null.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.ReturnObject.DebugMessage">
            <summary>Gets or sets the detailed exception message with debug information.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.ReturnObject.ExceptionMessage">
            <summary>Gets or sets the exception message.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.ReturnObject.IsException">
            <summary>Gets or sets a vlue indicating that an exception occured.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.ReturnObject.ReturnCode">
            <summary>Gets or sets the return code.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ReturnObject.ProcessException(System.Exception)">
            <summary>
            	Sets the properties based on the supplied parameters.
            </summary>
            <param name="ex">The exception used to create the exception message.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ReturnObject.ProcessException(System.Exception,System.Boolean)">
            <summary>
            	Sets the properties based on the supplied parameters.
            </summary>
            <param name="ex">The exception used to create the exception message.</param>
            <param name="includeDebugMessage">A <b>true</b> value will set the <see cref="P:DebugMessage"/>
            	property, while a <b>false</b> value will set it to null.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ReturnObject.ProcessException(System.Exception,System.Nullable{System.Int32})">
            <summary>
            	Sets the properties based on the supplied parameters.
            </summary>
            <param name="ex">The exception used to create the exception message.</param>
            <param name="returnCode">Return code.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.ReturnObject.ProcessException(System.Exception,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            	Sets the properties based on the supplied parameters.
            </summary>
            <param name="ex">The exception used to create the exception message.</param>
            <param name="returnCode">Return code.</param>
            <param name="includeDebugMessage">A <b>true</b> value will set the <see cref="P:DebugMessage"/>
            	property, while a <b>false</b> value will set it to null.</param>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Singleton`1">
            <summary>
                Summary description for Singleton.
            </summary>
            <typeparam name="T">The class being wrapped.</typeparam>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Singleton`1.Instance">
            <summary>
                Singleton instance.
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.SR">
            <summary>
            	A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.SR.GetObject(System.String)">
            <summary>
            	Looks up a localized resource object and returns its value.
            </summary>
            <param name="name">The name of the localized resource object.</param>
            <returns>
            	A localized resource object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.SR.GetString(System.String)">
            <summary>
            	Looks up a localized resource string and returns its value.
            </summary>
            <param name="name">The name of the localized resource string.</param>
            <returns>
            	A localized resource string.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.SR.GetString(System.String,System.Object[])">
            <summary>
            	Looks up a localized resource string and uses its value as the format string for the
            	specified arguments.
            </summary>
            <param name="name">The name of the localized resource string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>
            	A copy of the localized resource string in which the format items have been replaced
            	by the string representation of the corresponding objects in <i>args</i>.
            </returns>
        </member>
        <member name="P:openSourceC.DotNetLibrary.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.SR.Config_provider_name_null_or_empty">
            <summary>
              Looks up a localized string similar to Provider name cannot be null or empty..
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.SR.Injector_Already_Initialized">
            <summary>
              Looks up a localized string similar to This injector instance has already been initialized..
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.SR.Provider_Already_Initialized">
            <summary>
              Looks up a localized string similar to This provider instance has already been initialized..
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.StringValidate">
            <summary>
            	Summary description for StringValidate.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsAlpha(System.String)">
            <summary>
            	Determines if a string only contains alphabetic characters.
            </summary>
            <param name="input">The string to validate.</param>
            <returns>
            	<b>true</b> if the specified STR to check is alpha; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsAlphaNumeric(System.String)">
            <summary>
            	Determines if a string only contains alphabetic or numeric characters.
            </summary>
            <param name="input">The string to validate.</param>
            <returns>
            	<b>true</b> if [is alpha numeric] [the specified STR to check]; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsEIN(System.String)">
            <summary>
            	Determines if a string is a formatted Employer Identification Number.
            </summary>
            <param name="input">The string to validate.</param>
            <returns>
            	<b>true</b> if input is a formatted Employer Identification Number; otherwise,
            	<b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsEIN(System.String,System.Boolean)">
            <summary>
            	Determines if a input is an Employer Identification Number.
            </summary>
            <param name="input">The string to validate.</param>
            <param name="allowUnformatted">Allow unformatted numbers to validate.</param>
            <returns>
            	<b>true</b> if input is an Employer Identification Number; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsEmail(System.String)">
            <summary>
            Determines whether [is valid email] [the specified email].
            </summary>
            <param name="input">The string to validate.</param>
            <returns>
            	<b>true</b> if [is valid email] [the specified email]; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsInteger(System.String)">
            <summary>
            	Determines whether the specified input is an integer.
            </summary>
            <param name="input">The string to validate.</param>
            <returns>
            	<b>true</b> if the specified STR input is integer; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsIp(System.String)">
            <summary>
            	Determines whether or not the specified input string is a valid IP
            	address.
            </summary>
            <param name="input">The string to validate.</param>
            <returns>
            	<b>true</b> if the specified input string is a valid IP
            	address; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsNumber(System.String)">
            <summary>
            Determines whether the specified STR input is input.
            </summary>
            <param name="input">The string to validate.</param>
            <returns>
            	<b>true</b> if the specified STR input is input; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsNadpPhoneNumber(System.String)">
            <summary>
            	Determines whether or not phone input is a valid NADP input.
            </summary>
            <param name="input">The string to validate.</param>
            <returns>
            	<b>true</b> if input is a valid phone input; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsSSN(System.String)">
            <summary>
            	Determines if a input is a formatted Social Security Number.
            </summary>
            <param name="input">The string to validate.</param>
            <returns>
            	<b>true</b> if input is a formatted Social Security Number; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsSSN(System.String,System.Boolean)">
            <summary>
            	Determines if a input is a Social Security Number.
            </summary>
            <param name="input">The string to validate.</param>
            <param name="allowUnformatted">Allow unformatted numbers to validate.</param>
            <returns>
            	<b>true</b> if input is a Social Security Number; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.StringValidate.IsZipCode(System.String,System.Boolean)">
            <summary>
            Determines whether [is zip code plus4] [the specified zip code].
            Function to test for Zip Plus 4 Codes.
            </summary>
            <param name="input">The string to validate.</param>
            <param name="allowUnformatted">Allow unformatted numbers to validate.</param>
            <returns>
            	<b>true</b> if [is zip code plus4] [the specified zip code]; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Threading.CompareThreadByManagedThreadId">
            <summary>
            	Defines a method that implements a compare of two <see cref="T:Thread"/> objects by
            	their <see cref="P:Thread.ManagedThreadId"/> properties.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.CompareThreadByManagedThreadId.Compare(System.Threading.Thread,System.Threading.Thread)">
            <summary>
            	Compares two <see cref="T:Thread"/> objects and returns a value indicating whether
            	one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first <see cref="T:Thread"/> to compare.</param>
            <param name="y">The second <see cref="T:Thread"/> to compare.</param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.CompareThreadByManagedThreadId.Equals(System.Threading.Thread,System.Threading.Thread)">
            <summary>
            	Determines whether the specified <see cref="T:Thread"/> objects are equal.
            </summary>
            <param name="x">The first <see cref="T:Thread"/> to compare.</param>
            <param name="y">The second <see cref="T:Thread"/> to compare.</param>
            <returns>
            	<b>true</b> if the specified <see cref="T:Thread"/> objects are equal; otherwise,
            	<b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.CompareThreadByManagedThreadId.GetHashCode(System.Threading.Thread)">
            <summary>
            	Returns a hash code for the specified <see cref="T:Thread"/>.
            </summary>
            <param name="obj">The <see cref="T:Thread"/> for which a hash code is to be returned.</param>
            <returns>
            	A hash code for the specified <see cref="T:Thread"/>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Threading.IService">
            <summary>
            	Summary description for IService.
            </summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.IService.IsFullyOperational">
            <summary>Gets a value indicating that the processor is fully operational.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.IService.Execute">
            <summary>
            	Execute the processor.
            </summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Threading.ServiceThread">
            <summary>
            	Summary description for ServiceThread.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.#ctor(openSourceC.DotNetLibrary.Threading.IService,System.Threading.Thread)">
            <summary>
            	Create an instance of ServiceThread.
            </summary>
            <param name="service">The <see cref="T:IService"/> object.</param>
            <param name="thread">The thread executing the <see cref="T:IService"/>.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ServiceThread.InstanceId">
            <summary>Gets the unique identifier for this instance..</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ServiceThread.Service">
            <summary>Gets the <see cref="T:IService"/> object.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ServiceThread.Thread">
            <summary>Gets the thread executing the <see cref="T:IService"/>.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.CompareTo(System.Object)">
            <summary>
            	Compares the current instance with another object of the same type and returns an
            	integer that indicates whether the current instance precedes, follows, or occurs in
            	the same position in the sort order as the other object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.CompareTo(openSourceC.DotNetLibrary.Threading.ServiceThread)">
            <summary>
            	Compares the current instance with another object of the same type and returns an
            	integer that indicates whether the current instance precedes, follows, or occurs in
            	the same position in the sort order as the other object.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.Equals(openSourceC.DotNetLibrary.Threading.ServiceThread)">
            <summary>
            	Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.op_Equality(openSourceC.DotNetLibrary.Threading.ServiceThread,openSourceC.DotNetLibrary.Threading.ServiceThread)">
            <summary>
            	Define the is equal to operator.
            </summary>
            <param name="operand1"></param>
            <param name="operand2"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.op_Inequality(openSourceC.DotNetLibrary.Threading.ServiceThread,openSourceC.DotNetLibrary.Threading.ServiceThread)">
            <summary>
            	Define the is equal to operator.
            </summary>
            <param name="operand1"></param>
            <param name="operand2"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.op_GreaterThan(openSourceC.DotNetLibrary.Threading.ServiceThread,openSourceC.DotNetLibrary.Threading.ServiceThread)">
            <summary>
            	Define the is greater than operator.
            </summary>
            <param name="operand1"></param>
            <param name="operand2"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.op_LessThan(openSourceC.DotNetLibrary.Threading.ServiceThread,openSourceC.DotNetLibrary.Threading.ServiceThread)">
            <summary>
            	Define the is less than operator.
            </summary>
            <param name="operand1"></param>
            <param name="operand2"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.op_GreaterThanOrEqual(openSourceC.DotNetLibrary.Threading.ServiceThread,openSourceC.DotNetLibrary.Threading.ServiceThread)">
            <summary>
            	Define the is greater than or equal to operator.
            </summary>
            <param name="operand1"></param>
            <param name="operand2"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.op_LessThanOrEqual(openSourceC.DotNetLibrary.Threading.ServiceThread,openSourceC.DotNetLibrary.Threading.ServiceThread)">
            <summary>
            	Define the is less than or equal to operator.
            </summary>
            <param name="operand1"></param>
            <param name="operand2"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.Compare(openSourceC.DotNetLibrary.Threading.ServiceThread,openSourceC.DotNetLibrary.Threading.ServiceThread)">
            <summary>
            	Compares two objects and returns a value indicating whether one is less than, equal
            	to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.Equals(System.Object)">
            <summary>
            	Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThread.GetHashCode">
            <summary>
            	Returns the hash code for this credential.
            </summary>
            <returns></returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Threading.ServiceThreadSet">
            <summary>
            	Summary description for ServiceThreadSet.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.#ctor">
            <summary>
            	Create and instance of ServiceThreadSet.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.Finalize">
            <summary>
            	This destructor will run only if the Dispose method does not get called.
            </summary>
            <remarks>Do not provide destructors in types derived from this class.</remarks>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.Disposed">
            <summary>Gets a value indicating that this instance has been disposed.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.Dispose">
            <summary>
            	Dispose of this object.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.Dispose(System.Boolean)">
            <summary>
            	Dispose(bool disposing) executes in two distinct scenarios.  If disposing equals
            	<b>true</b>, <see cref="M:Dispose()"/> has been called directly or indirectly
            	by a user's code.  Managed and unmanaged resources can be disposed.  If disposing
            	equals <b>false</b>, <see cref="M:Dispose()"/> has been called by the runtime from
            	inside the finalizer and you should not reference other objects.  Only unmanaged
            	resources can be disposed.
            </summary>
            <param name="disposing"><b>true</b> when <see cref="M:Dispose()"/> has been called
            	directly or indirectly by a user's code.  <b>false</b> when <see cref="M:Dispose()"/>
            	has been called by the runtime from inside the finalizer and you should not
            	reference other objects.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.AllAlive">
            <summary>Gets a value indicating whether all threads are alive.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.AnyAlive">
            <summary>Gets a value indicating whether any thread is alive.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.AllFullyOperational">
            <summary>Gets a value indicating whether all threads are fully operational.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.Count">
            <summary>Gets the number of threads.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.AddStart(openSourceC.DotNetLibrary.Threading.IService)">
            <summary>
            	Add the specified <see cref="T:IService"/> object to the service thread set and
            	start executing the <see cref="M:IService.Execute()"/> method.
            </summary>
            <param name="service">The <see cref="T:IService"/> object.</param>
            <returns>
            	The unique service thread instance identifier.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.Join">
            <summary>
            	Blocks the calling thread until each thread represented by this instance terminates,
            	while continuing to perform standard COM and SendMessage pumping.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.Join(System.Guid)">
            <summary>
            	Blocks the calling thread until the specified service thread instance terminates,
            	while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <param name="instanceId">The unique service thread instance identifier to remove.</param>
            <returns>
            	<b>true</b> if the service thread instance is successfully removed; otherwise,
            	<b>false</b>. This method also returns false if the instance was not found.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.Join(System.Int32)">
            <summary>
            	Blocks the calling thread until each thread represented by this instance terminates
            	or the specified time elapses for each thread, while continuing to perform standard
            	COM and SendMessage pumping.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for each thread to
            	terminate.</param>
            <returns>
            	<b>true</b> if all of the threads have terminated; <b>false</b> if any thread has
            	not terminated after the amount of time specified by the
            	<paramref name="millisecondsTimeout"/> parameter has elapsed.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ServiceThreadSet.Join(System.TimeSpan)">
            <summary>
            	Blocks the calling thread until each thread represented by this instance terminates
            	or the specified time elapses for each thread, while continuing to perform standard
            	COM and SendMessage pumping.
            </summary>
            <param name="timeout">A TimeSpan set to the amount of time to wait for each thread to
            	terminate.</param>
            <returns>
            	<b>true</b> if all of the threads have terminated; <b>false</b> if any thread has
            	not terminated after the amount of time specified by the <paramref name="timeout"/>
            	parameter has elapsed.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Threading.ThreadSet">
            <summary>
            	Summary description for ThreadSet.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.#ctor">
            <summary>
            	Create an instance of ThreadSet.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.#ctor(System.Threading.CancellationTokenSource)">
            <summary>
            	Create an instance of ThreadSet.
            </summary>
            <param name="cancellationTokenSource"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Finalize">
            <summary>
            	This destructor will run only if the Dispose method does not get called.
            </summary>
            <remarks>Do not provide destructors in types derived from this class.</remarks>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ThreadSet.Disposed">
            <summary>Gets a value indicating that this instance has been disposed.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Dispose">
            <summary>
            	Dispose of this object.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Dispose(System.Boolean)">
            <summary>
            	Dispose(bool disposing) executes in two distinct scenarios.  If disposing equals
            	<b>true</b>, <see cref="M:Dispose()"/> has been called directly or indirectly
            	by a user's code.  Managed and unmanaged resources can be disposed.  If disposing
            	equals <b>false</b>, <see cref="M:Dispose()"/> has been called by the runtime from
            	inside the finalizer and you should not reference other objects.  Only unmanaged
            	resources can be disposed.
            </summary>
            <param name="disposing"><b>true</b> when <see cref="M:Dispose()"/> has been called
            	directly or indirectly by a user's code.  <b>false</b> when <see cref="M:Dispose()"/>
            	has been called by the runtime from inside the finalizer and you should not
            	reference other objects.</param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ThreadSet.AllAlive">
            <summary>Gets a value indicating whether all threads are alive.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ThreadSet.AnyAlive">
            <summary>Gets a value indicating whether any thread is alive.</summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ThreadSet.Count">
            <summary>Gets the number of threads.</summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Cancel">
            <summary>
            	Communicates a request to cancel all threads.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.CreateAdd(System.Threading.ParameterizedThreadStart,System.String)">
            <summary>
            	Create a new <see cref="T:Thread"/> using the specified <see cref="T:ThreadStart"/>
            	and add it to the set.
            </summary>
            <remarks>
            	Each thread should signal the <see cref="T:CountdownEvent"/> once, and only once, to
            	indicate that the thread has successfully started.  The <see cref="M:Wait()"/>
            	methods can then be used to allow the system to wait until all threads are fully
            	operational.
            	<para>NOTE: There is no guarantee that all threads will successfully start.</para>
            </remarks>
            <param name="start">A <see cref="T:ParameterizedThreadStart"/> delegate that represents
            	the method to be invoked when this thread begins executing.</param>
            <param name="name">The name of the thread, or <b>null</b>. (Optional, defaults to null)</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.CreateAdd``1(System.Threading.ParameterizedThreadStart,``0,System.String)">
            <summary>
            	Create a new <see cref="T:Thread"/> using the specified <see cref="T:ThreadStart"/>
            	and add it to the set.
            </summary>
            <remarks>
            	Each thread should signal the <see cref="T:CountdownEvent"/> once, and only once, to
            	indicate that the thread has successfully started.  The <see cref="M:Wait()"/>
            	methods can then be used to allow the system to wait until all threads are fully
            	operational.
            	<para>NOTE: There is no guarantee that all threads will successfully start.</para>
            </remarks>
            <param name="start">A <see cref="T:ParameterizedThreadStart"/> delegate that represents
            	the method to be invoked when this thread begins executing.</param>
            <param name="parameter">The parameter object to pass to the invoked method.</param>
            <param name="name">The name of the thread, or <b>null</b>. (Optional, defaults to null)</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Join">
            <summary>
            	Blocks the calling thread until each thread represented by this instance terminates,
            	while continuing to perform standard COM and SendMessage pumping.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Join(System.Int32)">
            <summary>
            	Blocks the calling thread until each thread represented by this instance terminates
            	or the specified time elapses for each thread, while continuing to perform standard
            	COM and SendMessage pumping.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for each thread to
            	terminate.</param>
            <returns>
            	<b>true</b> if all of the threads have terminated; <b>false</b> if any thread has
            	not terminated after the amount of time specified by the
            	<paramref name="millisecondsTimeout"/> parameter has elapsed.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Join(System.TimeSpan)">
            <summary>
            	Blocks the calling thread until each thread represented by this instance terminates
            	or the specified time elapses for each thread, while continuing to perform standard
            	COM and SendMessage pumping.
            </summary>
            <param name="timeout">A TimeSpan set to the amount of time to wait for each thread to
            	terminate.</param>
            <returns>
            	<b>true</b> if all of the threads have terminated; <b>false</b> if any thread has
            	not terminated after the amount of time specified by the <paramref name="timeout"/>
            	parameter has elapsed.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Start">
            <summary>
            	Close adds and start threads.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Wait(System.Threading.CancellationToken)">
            <summary>
            	Blocks the current thread until all of the threads have signaled their readiness
            	while observing the <see cref="T:CancellationToken"/>.
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Wait(System.Int32)">
            <summary>
            	Blocks the current thread until all of the threads have signaled their readiness, or
            	the timeout expires.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or
            	<see cref="P:Timeout.Infinite"/>(-1) to wait indefinitely.</param>
            <returns>
            	<b>true</b> if all of the threads have signaled their readiness; otherwise,
            	<b>false</b>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSet.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            	Blocks the current thread until all of the threads have signaled their readiness, or
            	the timeout expires, while observing the <see cref="T:CancellationToken"/>.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or
            	<see cref="P:Timeout.Infinite"/>(-1) to wait indefinitely.</param>
            <param name="cancellationToken"></param>
            <returns>
            	<b>true</b> if all of the threads have signaled their readiness; otherwise,
            	<b>false</b>.
            </returns>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Threading.ThreadSetParameter`1">
            <summary>
            	Summary description for ThreadSetParameter.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSetParameter`1.#ctor(System.Threading.CancellationToken,System.Threading.CountdownEvent,`0)">
            <summary>
            	Create and instance of ThreadSetParameter.
            </summary>
            <param name="cancellationToken"></param>
            <param name="countdownEvent"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ThreadSetParameter`1.Parameter">
            <summary></summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.Threading.ThreadSetParameter">
            <summary>
            	Summary description for ThreadSetParameter.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.Threading.ThreadSetParameter.#ctor(System.Threading.CancellationToken,System.Threading.CountdownEvent)">
            <summary>
            	Create and instance of ThreadSetParameter.
            </summary>
            <param name="cancellationToken"></param>
            <param name="countdownEvent"></param>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ThreadSetParameter.CancellationToken">
            <summary></summary>
        </member>
        <member name="P:openSourceC.DotNetLibrary.Threading.ThreadSetParameter.CountdownEvent">
            <summary></summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.XmlSerializationWrapper`1">
            <summary>
            	Summary description for XmlSerializationWrapper&lt;TItem&gt;.
            </summary>
            <typeparam name="TItem">The type of the items to serialize.</typeparam>
        </member>
        <member name="P:openSourceC.DotNetLibrary.XmlSerializationWrapper`1.ItemArray">
            <summary></summary>
        </member>
        <member name="T:openSourceC.DotNetLibrary.XmlSerialize">
            <summary>
            	Summary description for XmlSerialize.
            </summary>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.DecryptFromBase64String``2(System.String,System.Byte[],System.Byte[])">
            <summary>
            	Decrypts and deserializes the specified object using the specified key and
            	initialization vector and returns a base 64 encoded string of the encrypted data.
            </summary>
            <typeparam name="TObject">The type of the object to deserialize.</typeparam>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="base64XmlString">The string to be decrypted and deserialized.</param>
            <param name="key">Encryption key.</param>
            <param name="iv">Encryption initialization vector.</param>
            <returns>
            	An object of type <typeparamref name="TObject"/>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.DecryptFromBase64String``1(System.String,System.Byte[],System.Byte[])">
            <summary>
            	Decrypts and deserializes the specified object using the specified key and
            	initialization vector and returns a base 64 encoded string of the encrypted data.
            </summary>
            <typeparam name="TObject">The type of the object to deserialize.</typeparam>
            <param name="base64XmlString">The string to be decrypted and deserialized.</param>
            <param name="key">Encryption key.</param>
            <param name="iv">Encryption initialization vector.</param>
            <returns>
            	An object of type <typeparamref name="TObject"/>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize``1(System.IO.Stream)">
            <summary>
            	Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TObject">The type of the object to deserialize.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the XML document to
            	deserialize.</param>
            <returns>
            	An object of type <typeparamref name="TObject"/>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize``1(System.String)">
            <summary>
            	Deserializes the XML document contained by the specified string.
            </summary>
            <typeparam name="TObject">The type of the object to deserialize.</typeparam>
            <param name="xmlString">The string to be deserialized.</param>
            <returns>
            	An object of type <typeparamref name="TObject"/>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize``1(System.IO.TextReader)">
            <summary>
            	Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <typeparam name="TObject">The type of the object to deserialize.</typeparam>
            <param name="textReader">The <see cref="T:System.IO.TextReader"/> that contains the XML document
            	to deserialize.</param>
            <returns>
            	An object of type <typeparamref name="TObject"/>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize``1(System.Xml.Linq.XElement)">
            <summary>
            	Deserializes the specified <see cref="T:XElement"/>.
            </summary>
            <typeparam name="TObject">The type of the object to deserialize.</typeparam>
            <param name="node">The <see cref="T:XElement"/> to be deserialized.</param>
            <returns>
            	An object of type <typeparamref name="TObject"/>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize``1(System.Xml.XmlElement)">
            <summary>
            	Deserializes the specified <see cref="T:XmlElement"/>.
            </summary>
            <typeparam name="TObject">The type of the object to deserialize.</typeparam>
            <param name="element">The <see cref="T:XmlElement"/> to be deserialized.</param>
            <returns>
            	An object of type <typeparamref name="TObject"/>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize``1(System.Xml.XmlReader)">
            <summary>
            	Deserializes the XML document contained by the specified <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <typeparam name="TObject">The type of the object to deserialize.</typeparam>
            <param name="xmlReader">The <see cref="T:System.Xml.XmlReader"/> that contains the XML document
            	to deserialize.</param>
            <returns>
            	An object of type <typeparamref name="TObject"/>.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize(System.Type,System.IO.Stream)">
            <summary>
            	Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the XML document to
            	deserialize.</param>
            <returns>
            	An object of the specified type.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize(System.Type,System.String)">
            <summary>
            	Deserializes the XML document contained by the specified string.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="xmlString">The string to be deserialized.</param>
            <returns>
            	An object of the specified type.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize(System.Type,System.IO.TextReader)">
            <summary>
            	Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="textReader">The <see cref="T:System.IO.TextReader"/> that contains the XML document
            	to deserialize.</param>
            <returns>
            	An object of the specified type.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize(System.Type,System.Xml.Linq.XElement)">
            <summary>
            	Deserializes the specified <see cref="T:XElement"/>.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="node">The <see cref="T:XElement"/> to be deserialized.</param>
            <returns>
            	An object of the specified type.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize(System.Type,System.Xml.XmlElement)">
            <summary>
            	Deserializes the specified <see cref="T:XmlElement"/>.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="element">The <see cref="T:XmlElement"/> to be deserialized.</param>
            <returns>
            	An object of the specified type.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Deserialize(System.Type,System.Xml.XmlReader)">
            <summary>
            	Deserializes the XML document contained by the specified <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="xmlReader">The <see cref="T:System.Xml.XmlReader"/> that contains the XML document
            	to deserialize.</param>
            <returns>
            	An object of the specified type.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.EncryptToBase64String``2(``0,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            	Encrypts and serializes the specified object using the specified key and
            	initialization vector and returns a base 64 encoded string of the encrypted data.
            </summary>
            <typeparam name="TObject">The type of the object to serialize.</typeparam>
            <typeparam name="TSymmetricAlgorithm">The type of the cryptographic object used to
            	perform the symmetric algorithm.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="key">Encryption key.</param>
            <param name="iv">Encryption initialization vector.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <returns>
            	An XML formatted string representation of the object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.EncryptToBase64String``1(``0,System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            	Encrypts and serializes the specified object using the <see cref="T:RijndaelManaged"/>
            	algorithm, specified key, and initialization vector, returning a base 64 encoded
            	string of the encrypted data.
            </summary>
            <typeparam name="TObject">The type of the object to serialize.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="key">Encryption key.</param>
            <param name="iv">Encryption initialization vector.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <returns>
            	An XML formatted string representation of the object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Serialize``1(``0,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and returning the XML fragment as a string.
            </summary>
            <typeparam name="TObject">The type of the object to serialize.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
            <returns>
            	An XML formatted string representation of the object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Serialize``1(``0,System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and writes the XML fragment to the specified
            	<see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TObject">The type of the object to serialize.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="output">The <see cref="T:System.IO.Stream"/> of which to write the XML document.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Serialize``1(``0,System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and writes the XML fragment to the specified
            	<see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <typeparam name="TObject">The type of the object to serialize.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="output">The <see cref="T:System.Text.StringBuilder"/> of which to write the XML document.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Serialize``1(``0,System.IO.TextWriter,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and writes the XML fragment to the specified
            	<see cref="T:System.IO.TextWriter"/>.
            </summary>
            <typeparam name="TObject">The type of the object to serialize.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> of which to write the XML document.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Serialize``1(``0,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            	Serializes the specified object and writes the XML fragment to the specified
            	<see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <typeparam name="TObject">The type of the object to serialize.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="output">The <see cref="T:System.Xml.XmlWriter"/> of which to write the XML document.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Serialize(System.Type,System.Object,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and returning the XML fragment as a string.
            </summary>
            <param name="type">The type of the object to serialize.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
            <returns>
            	An XML formatted string representation of the object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Serialize(System.Type,System.Object,System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and writes the XML fragment to the specified
            	<see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="type">The type of the object to serialize.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="output">The <see cref="T:System.IO.Stream"/> of which to write the XML document.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Serialize(System.Type,System.Object,System.Text.StringBuilder,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and writes the XML fragment to the specified
            	<see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="type">The type of the object to serialize.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="output">The <see cref="T:System.Text.StringBuilder"/> of which to write the XML document.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Serialize(System.Type,System.Object,System.IO.TextWriter,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and writes the XML fragment to the specified
            	<see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="type">The type of the object to serialize.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> of which to write the XML document.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.Serialize(System.Type,System.Object,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            	Serializes the specified object and writes the XML fragment to the specified
            	<see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="type">The type of the object to serialize.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="output">The <see cref="T:System.Xml.XmlWriter"/> of which to write the XML document.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.SerializeToXElement``1(``0,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and returns the XML fragment as an <see cref="T:XElement"/>.
            </summary>
            <typeparam name="TObject">The type of the object to serialize.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
            <returns>
            	An <see cref="T:XElement"/> representation of the object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.SerializeToXElement(System.Type,System.Object,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and returns the XML fragment as an <see cref="T:XElement"/>.
            </summary>
            <param name="type">The type of the object to serialize.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
            <returns>
            	An <see cref="T:XElement"/> representation of the object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.SerializeToXmlElement``1(``0,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and returns the XML fragment as an <see cref="T:XmlElement"/>.
            </summary>
            <typeparam name="TObject">The type of the object to serialize.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
            <returns>
            	An <see cref="T:XmlElement"/> representation of the object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.SerializeToXmlElement(System.Type,System.Object,System.Boolean,System.Boolean)">
            <summary>
            	Serializes the specified object and returns the XML fragment as an <see cref="T:XmlElement"/>.
            </summary>
            <param name="type">The type of the object to serialize.</param>
            <param name="obj">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="supportXsiNamespace"><b>true</b> to support xsi namespace (i.e. xsi:type,
            	xsi:nil, xsi:schema, xsi:schemaLocation, and xsi:noNamespaceSchemaLocation).</param>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
            <returns>
            	An <see cref="T:XmlElement"/> representation of the object.
            </returns>
        </member>
        <member name="M:openSourceC.DotNetLibrary.XmlSerialize.GetNewXmlWriterSettingsObject(System.Boolean)">
            <summary>
            	Create a default <see cref="T:System.Xml.XmlWriterSettings"/> object for formatting the XML output.
            </summary>
            <param name="expandForReadability"><b>true</b> to expand the XML with line feeds and
            	spacing, <b>false</b> to remove all readability formatting.</param>
            <returns>An <see cref="T:System.Xml.XmlWriterSettings"/> object.</returns>
        </member>
    </members>
</doc>
